@using DogsOnTrailApp.Models
@using DogsOnTrailApp.Pages.Actions.Manage
@using DogsOnTrailApp.Services;
@using SharedCode.Entities;

@inject AuthenticationStateProvider AuthStateProvider 
@inject IModalService ModalService
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager NavManager
@inject IUserProfileService UserProfileService


<div class="dropdown dropstart">
  <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
      <div class="three-dots"></div>
  </a>

    <ul class="dropdown-menu">
        <li><a class="dropdown-item" @onclick="@(async () => await CreateEntry(Model))">@Localizer["Action.CreateEntry"]</a></li>
        <li><a class="dropdown-item" @onclick="@(async () => await GoToResults(Model))">@Localizer["Action.Results"]</a></li>
        
        <AuthorizeView>
            <Authorized>
                @if (UserProfileService.Get()?.Rights?.FirstOrDefault(right => right.ActionId == Model.Id && right.Roles.Contains(AuthorizationRoleDto.RoleType.Owner.ToString())) != null)
                {
                    <li><a class="dropdown-item" @onclick="@(async () => await ManageAction(Model))">@Localizer["Edit"]</a></li>
                    <li><a class="dropdown-item" @onclick="@(async () => await DeleteAction(Model))">@Localizer["Delete"]</a></li>
                }
            </Authorized>
        </AuthorizeView>
    </ul>
</div>

@code {
    [Parameter] public ActionModel Model { get; set; }
    [Parameter] public EventCallback<ActionModel> OnItemChanged { get; set; } 
    
    protected override async Task OnInitializedAsync()
    {
    }
    
    protected async Task ManageAction(ActionModel action)
    {
        NavManager.NavigateTo($"/action_manage/{action.Id}");
    }
    
    protected async Task DeleteAction(ActionModel action)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ActionManage.Model), action)
            .Add(nameof(ActionManage.RequiredAction), RequiredActionEnum.DeleteAction);
        
        var messageForm = ModalService.Show<ActionManage>(Localizer["Delete action"], parameters);
        var result = await messageForm.Result;
        
        await OnItemChanged.InvokeAsync(action);
    }

    protected async Task CreateEntry(ActionModel action)
    {
        NavManager.NavigateTo($"/action/{action.Id}/create_entry");
    }

    protected async Task GoToResults(ActionModel action)
    {
        NavManager.NavigateTo($"/results/{action.Id}");
    }
}