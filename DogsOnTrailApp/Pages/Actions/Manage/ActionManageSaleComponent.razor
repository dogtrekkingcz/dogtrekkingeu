@using Microsoft.AspNetCore.Components
@using DogsOnTrailApp.Models

@inject IModalService modal
@inject IStringLocalizer<Resource> localizer

<section>
    <table>
        <thead>
            <th>@localizer["Actions.Sale.Name"]</th>
            <th>@localizer["Actions.Sale.Description"]</th>
            <th>@localizer["Actions.Sale.Price"]</th>
            <th>@localizer["Actions.Sale.Currency"]</th>
            <th>@localizer["Actions.Sale.Variants"]</th>
            <th>@localizer["Actions.Sale.Sizes"]</th>
            <th>@localizer["Actions.Sale.Colors"]</th>
            <th>@localizer["Actions"]</th>
        </thead>
        <tbody>

        @foreach (var saleItem in Model.Sale.Items)
        {
            <tr>
                <td>
                    @if (saleItem == EditableItem)
                    {
                        <input type="text" @bind="@saleItem.Name" @onblur="(args) => StateHasChanged()" required />
                    }
                    else
                    {
                        @saleItem.Name
                    }
                </td>
                <td>
                    @if (saleItem == EditableItem)
                    {
                        <input type="text" @bind="@saleItem.Description" @onblur="(args) => StateHasChanged()"/>
                    }
                    else
                    {
                        @saleItem.Description
                    }
                </td>
                <td>
                    @if (saleItem == EditableItem)
                    {
                        <input type="number" @bind="@saleItem.Price" @onblur="(args) => StateHasChanged()" required />
                    }
                    else
                    {
                        @saleItem.Price
                    }
                </td>
                <td>
                    @if (saleItem == EditableItem)
                    {
                        <input type="text" @bind="@saleItem.Currency" @onblur="(args) => StateHasChanged()" required />
                    }
                    else
                    {
                        @saleItem.Currency
                    }
                </td>
                <td>
                    <ul>
                        @foreach (var variant in saleItem.Variants)
                        {
                            if (saleItem == EditableItem)
                            {
                                <li><input type="text" @bind="@saleItem.Variants[saleItem.Variants.FindIndex(v => v == variant)]" @onblur="(args) => StateHasChanged()" required /></li>
                            }
                            else
                            {
                                <li>@variant</li>
                            }
                        }
                        
                        @if (saleItem == EditableItem)
                        {
                            <li>
                                <input type="text" @bind="TmpVariant" @onblur="(args) => AddedVariant(saleItem)" placeholder="@localizer["General.New"]" />
                            </li>
                        }
                    </ul>
                </td>
                <td>
                    <ul>
                        @foreach (var size in saleItem.Sizes)
                        {
                            if (saleItem == EditableItem)
                            {
                                <li><input type="text" @bind="@saleItem.Sizes[saleItem.Sizes.FindIndex(s => s == size)]" @onblur="(args) => StateHasChanged()" /></li>
                            }
                            else
                            {
                                <li>@size</li>
                            }
                        }
                        
                        @if (saleItem == EditableItem)
                        {
                            <li>
                                <input type="text" @bind="TmpSize" @onblur="(args) => AddedSize(saleItem)" placeholder="@localizer["General.New"]" />
                            </li>
                        }
                    </ul>
                </td>
                <td>
                    <ul>
                        @foreach (var color in saleItem.Colors)
                        {
                            if (saleItem == EditableItem)
                            {
                                <li>
                                    <input type="text" @bind="saleItem.Colors[saleItem.Colors.FindIndex(c => c == color)]" @onblur="(args) => StateHasChanged()"/>
                                </li>
                            }
                            else
                            {
                                <li>@color</li>
                            }
                        }
                        
                        @if (saleItem == EditableItem)
                        {
                            <li>
                                <input type="text" @bind="TmpColor" @onblur="(args) => AddedColor(saleItem)" placeholder="@localizer["General.New"]" />
                            </li>
                        }
                    </ul>
                </td>
                <td>
                    <button type="button" class="btn btn-secondary" @onclick="(args) => MakeEditable(saleItem)">Edit</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
    <hr />

    <button type="button" class="btn btn-primary" @onclick="AddNewCommonItem">@localizer["Actions.Sales.AddNewItem"]</button>
    <button type="button" class="btn btn-primary" @onclick="AddNewTShirtItem">@localizer["Actions.Sales.AddNewTShirtItem"]</button>
    
</section>


@code {
    [Parameter]
    public ActionModel Model { get; set; }
    
    private string TmpColor { get; set; }
    private string TmpSize { get; set; }
    private string TmpVariant { get; set; }

    private ActionModel.ActionSaleItemDto EditableItem { get; set; } = null;

    private void AddNewCommonItem()
    {
        Model.Sale.Items.Add(new ActionModel.ActionSaleItemDto
        {
            Id = Guid.NewGuid().ToString()
        });
        
        StateHasChanged();
    }

    private void AddNewTShirtItem()
    {
        Model.Sale.Items.Add(new ActionModel.ActionSaleItemDto
        {
            Id = Guid.NewGuid().ToString(),
            Sizes = new List<string> { "XS", "S", "M", "L", "XL", "XXL", "XXXL" },
            Variants = new List<string> { "Unisex", "M", "F" },
            Colors = new List<string> { "white", "blue", "red" },
            Name = "T-Shirt",
            Price = 100,
            Currency = "Kč",
            Description = "T-Shirt from cotton with race-motif"
        });
        
        StateHasChanged();
    }
    
    private void AddedVariant(ActionModel.ActionSaleItemDto saleItem)
    {
        if (string.IsNullOrEmpty(TmpVariant) == false)
            saleItem.Variants.Add(TmpVariant);

        TmpVariant = "";
        
        StateHasChanged();
    }
    
    private void AddedColor(ActionModel.ActionSaleItemDto saleItem)
    {
        if (string.IsNullOrEmpty(TmpColor) == false)
            saleItem.Colors.Add(TmpColor);

        TmpColor = "";
        
        StateHasChanged();
    }

    private void AddedSize(ActionModel.ActionSaleItemDto saleItem)
    {
        if (string.IsNullOrEmpty(TmpSize) == false)
            saleItem.Sizes.Add(TmpSize);

        TmpSize = "";
        
        StateHasChanged();
    }

    private void MakeEditable(ActionModel.ActionSaleItemDto saleItem)
    {
        EditableItem = saleItem;
        
        StateHasChanged();
    }
}