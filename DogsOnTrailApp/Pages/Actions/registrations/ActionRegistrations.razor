@page "/action_manage/{Id}/registrations"

@inject Protos.Actions.Actions.ActionsClient ActionsClient
@inject Protos.Entries.Entries.EntriesClient EntriesClient
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager NavManager
@inject IMapper Mapper
@inject IUserProfileService UserProfileService

@using DogsOnTrailApp.Models
@using DogsOnTrailApp.Services
@using MapsterMapper
@using Protos.Actions
@using SharedCode.Entities
@using Microsoft.AspNetCore.Components.Authorization


<h3>@Localizer["Action.Manage.Registrations"]</h3>

@if (Action == null)
{
    <p>
        <em>@Localizer["Loading ..."]</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>@Localizer["Surname"], @Localizer["Name"]</th>
            <th>@Localizer["Race"]</th>
            <th>@Localizer["Category"]</th>
            <th>@Localizer["Dogs"]</th>
            <th>@Localizer["Payments"]</th>
            <th>@Localizer["Actions"]</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var entry in Registrations)
        {
            var race = Action.Races.First(race => race.Id == entry.RaceId);
            var category = race.Categories.First(category => category.Id == entry.CategoryId);
            
            <tr class="to-be-imported">
                <td>
                    @entry.Surname, @entry.Name
                </td>
                <td>
                    @race.Name
                </td>
                <td>
                    @category.Name
                </td>
                <td>
                    <ul>
                        @foreach (var dog in entry.Dogs)
                        {
                            <li>@dog.Chip - @dog.Birthday?.ToString("yyyy-MM-dd") - @dog.Pedigree - @dog.Name</li>
                        }
                    </ul>
                </td>
                <td>
                </td>
                <td>
                    <div class="dropdown dropstart">
                        <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <div class="three-dots"></div>
                        </a>
                    
                        <ul class="dropdown-menu">
                            <AuthorizeView>
                                <Authorized>
                                    @if (UserProfileService.Get()?.Rights?.FirstOrDefault(right => right.ActionId == Action.Id && right.Roles.Contains(AuthorizationRoleDto.RoleType.Owner.ToString())) != null)
                                    {
                                        <li><a class="dropdown-item" @onclick="@(async () => await ImportRegistrationToAction(entry))">@Localizer["Action.Manage.AcceptRegistration"]</a></li>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </ul>
                    </div>
                </td>
            </tr>
        }
        
        @foreach (var race in Action.Races)
        {
            @foreach (var category in race.Categories)
            {
                foreach (var racer in category.Racers)
                {
                    <tr>
                        <td>
                            @racer.LastName, @racer.FirstName
                        </td>
                        <td>
                            @race.Name
                        </td>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            <ul>
                                @foreach (var dog in racer.Dogs)
                                {
                                    <li>@dog.Chip - @dog.Birthday?.ToString("yyyy-MM-dd") - @dog.Pedigree - @dog.Name</li>
                                }
                            </ul>
                        </td>
                        <td>
                            <ul>
                                @foreach (var payment in racer.Payments)
                                {
                                    <li>@payment.Date - @payment.Amount @payment.Currency</li>
                                }
                            </ul>
                        </td>
                        <td>
                            <div class="dropdown dropstart">
                                <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <div class="three-dots"></div>
                                </a>
                            
                                <ul class="dropdown-menu">
                                    <AuthorizeView>
                                        <Authorized>
                                            @if (UserProfileService.Get()?.Rights?.FirstOrDefault(right => right.ActionId == Action.Id && right.Roles.Contains(AuthorizationRoleDto.RoleType.Owner.ToString())) != null)
                                            {
                                                @* <li><a class="dropdown-item" @onclick="@(async () => await ImportRegistrationToAction(racer))">@Localizer["Action.Manage.AcceptRegistration"]</a></li> *@
                                            }
                                        </Authorized>
                                    </AuthorizeView>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            }
        }
        </tbody>
    </table>
    
    <button type="button" @onclick="async () => SaveChangesAsync()">@Localizer["General.Save"]</button>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private ActionModel Action { get; set; } = null;
    private List<EntryModel> Registrations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var actionResponse = await ActionsClient.getActionAsync(new Protos.Actions.GetActionRequest
        {
            Id = Id
        });

        Action = Mapper.Map<ActionModel>(actionResponse.Action);
        
        // ---
        
        var response = await EntriesClient.getEntriesByActionAsync(new Protos.Entries.GetEntriesByActionRequest
        {
            ActionId = Id
        });

        Registrations = Mapper.Map<List<EntryModel>>(response.Entries);
    }

    private async Task ImportRegistrationToAction(EntryModel entry)
    {
        await ActionsClient.importRegistrationToActionAsync(new Protos.Actions.ImportRegistrationToActionRequest
        {
            EntryId = entry.Id.ToString(),
            ActionId = entry.ActionId.ToString()
        });
        
        StateHasChanged();
    }
    
    private async Task SaveChangesAsync()
    {
        var request = Mapper.Map<UpdateActionRequest>(Action);
        
        await ActionsClient.updateActionAsync(request);
    }
}