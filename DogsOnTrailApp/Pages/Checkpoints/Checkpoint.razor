@page "/checkpoint/{ActionId?}/{CheckpointId?}"

@using System.Text.Json.Nodes
@using DogsOnTrailApp.Models
@using MapsterMapper
@using System.Globalization
@using DogsOnTrailApp.Extensions
@inject Protos.Checkpoints.Checkpoints.CheckpointsClient CheckpointsClient
@inject IStringLocalizer<Resource> Loc
@inject IMapper Mapper
@inject IJSRuntime JsRuntime

<h3>@Loc["Checkpoint.Title"]</h3>
<h5>@Loc["Checkpoint.Description"]</h5>

<div class="container">
    <div class="row">
        <div class="col-4">
            <input type="text" value="@ToString(Model.CheckpointTime)" disabled placeholder="@Loc["Checkpoint.Time"]" />
        </div>
        <div class="col-4">
            <Switch @bind-Value="ContinualGpsCoordinatesAcquiringIsOn" Label="@Loc["Checkpoint.GPS"]" />
            <input type="text" value="@ToGpsCoordsString(Model.Position)" disabled placeholder="@Loc["Checkpoint.Position"]" />
        </div>
        <div class="col-4">
            <input type="text" @bind="@Model.Data" placeholder="@Loc["Checkpoint.Data"]" />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <input type="text" style="width: 100%;" @bind="@Model.Note" placeholder="@Loc["Checkpoint.Note"]" />
        </div>
    </div>
</div>

<Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleCheckpointDetailsAsync">@Loc["Checkpoint.ShowDetails"]</Button>
<Collapse @ref="checkpointDetails">
    <Card>
        <CardBody>
            <div class="container">
                <div class="row">
                    <div class="col-sm-12 col-6">
                        <label>@Loc["Checkpoint.Name"]</label>
                    </div>
                    <div class="col-sm-12 col-6">
                        <input type="text" @bind="Model.Name" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-6">
                        <label>@Loc["Checkpoint.Description"]</label>
                    </div>
                    <div class="col-sm-12 col-6">
                        <input type="text" @bind="Model.Description" />
                    </div>
                </div>
            </div>
        </CardBody>
    </Card>
</Collapse>

<Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleQrReaderAsync">@Loc["Checkpoint.QrReader"]</Button>
<Collapse @ref="qrReader">
    <Card>
        <CardBody>
            <Switch @bind-Value="QrReaderIsOn" Label="@Loc["Checkpoint.QrReader"]" />
            <Switch @bind-Value="AutoSend" Label="@Loc["Checkpoint.AutoSend"]" />

            <div class="card card-body">
                <div id="loadingMessage">@Loc["Checkpoint.UnableToStartCameraForQrCodeReading"]</div>
                <canvas id="canvas" hidden></canvas>

                <div id="output" hidden>
                    <div id="outputMessage">@Loc["Checkpoint.NoQRDetected"]</div>
                </div>
            </div>
        </CardBody>
    </Card>
</Collapse>

<button type="button" @onclick="SendDataAsync">@Loc["Checkpoint.SendData"]</button>
  
@code {

    [Parameter]
    public string ActionId { get; set; }
    
    [Parameter]
    public string CheckpointId { get; set; }
    
    private CheckpointModel Model { get; set; } = new();

    Collapse checkpointDetails = default!;
    private async Task ToggleCheckpointDetailsAsync() => await checkpointDetails.ToggleAsync();

    Collapse qrReader = default!;
    private async Task ToggleQrReaderAsync() => await qrReader.ToggleAsync();
    
    private bool ContinualGpsCoordinatesAcquiringIsOn = false;
    private bool QrReaderIsOn = false;

    private bool AutoSend = false;
    
    private static Func<string, Task> UpdateQrCodeAsync;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
     
        if (string.IsNullOrWhiteSpace(ActionId) == false)
            Model.ActionId = ActionId.ToGuid();

        if (string.IsNullOrWhiteSpace(CheckpointId) == false)
            Model.CheckpointId = CheckpointId.ToGuid();
        
        UpdateQrCodeAsync = UpdateModelWithNewQrCode;
    }

    private async Task UpdateModelWithNewQrCode(string qrCode)
    {
        Model.Data = qrCode;
        Model.CheckpointTime = DateTimeOffset.Now;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StartGpsCoordinatesGetting();
            StartQrReader();
            StartCurrentTimeThread();
        }
    }
    
    [JSInvokable]
    public static async void QrCodeAcquiredAsync(string value)
    {
        await UpdateQrCodeAsync?.Invoke(value);
    }

    private string ToString(DateTimeOffset dateTimeOffset)
    {
        return dateTimeOffset.ToString("dd HH:mm:ss");
    }

    private string ToGpsCoordsString(CheckpointModel.LatLngDto position)
    {
        return $"{Model.Position.Latitude}N, {Model.Position.Longitude}E";
    }

    private async Task SendDataAsync()
    {
        if (Model.CheckpointTime == default)
            Model.CheckpointTime = DateTimeOffset.Now;
        
        var request = Mapper.Map<Protos.Checkpoints.AddCheckpoint.AddCheckpointRequest>(Model);
        
        await CheckpointsClient.addCheckpointAsync(request);

        Model.Data = "";
        Model.CheckpointTime = default;
    }

    private void StartQrReader()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                if (QrReaderIsOn)
                {
                    Model.Data = "";
                    StateHasChanged();

                    Task.Run(async () => await JsRuntime.InvokeVoidAsync("readQrCode"));

                    while (QrReaderIsOn && Model.Data == "")
                    {
                        await Task.Delay(200);
                    }

                    QrReaderIsOn = false;
                    await JsRuntime.InvokeVoidAsync("destroyQrReader");
                    
                    if (Model.Data != "" && AutoSend)
                    {
                        QrReaderIsOn = true;
                        await SendDataAsync();
                    }
                }

                await Task.Delay(2000);
            }
        });
    }
    
    private void StartGpsCoordinatesGetting()
    {
        Task.Run(async () =>
        {
            while (true) 
            {
                if (ContinualGpsCoordinatesAcquiringIsOn)
                {
                    var result = await JsRuntime.InvokeAsync<JsonArray>("getGpsLocation");

                    if (result != null && result.Count >= 2)
                    {
                        Model.Position.Latitude = double.Parse(result[0].ToString(), CultureInfo.InvariantCulture);
                        Model.Position.Longitude = double.Parse(result[1].ToString(), CultureInfo.InvariantCulture);
                
                        StateHasChanged();
                    }
                }
                
                await Task.Delay(2000);
            }
        });
    }

    private void StartCurrentTimeThread()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                Model.CheckpointTime = DateTimeOffset.Now;
                StateHasChanged();
                
                await Task.Delay(500);
            }
        });
    }
}