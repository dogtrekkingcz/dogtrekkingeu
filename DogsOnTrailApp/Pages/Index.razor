@page "/"
@using DogsOnTrailApp.Models;
@using DogsOnTrailApp.Pages.UserProfiles;
@using DogsOnTrailApp.Services
@using Protos.UserProfiles
@using System.Security.Claims;
@using DogsOnTrailApp.Extensions
@using MapsterMapper
@using Protos.LiveUpdatesSubscription
@using Protos.UserProfiles.GetUserProfile

@inject Protos.LiveUpdatesSubscription.LiveUpdatesSubscription.LiveUpdatesSubscriptionClient LiveUpdatesSubscriptionClient
@inject Protos.ActionRights.ActionRights.ActionRightsClient ActionRightsClient
@inject Protos.UserProfiles.UserProfiles.UserProfilesClient UserProfilesClient
@inject IUserProfileService UserProfileService
@inject AuthenticationStateProvider AuthStateProvider
@inject IModalService modal
@inject IStringLocalizer<Resource> localizer
@inject IMapper mapper


<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        Jsi přihlášen jako @context.User.Identity?.Name!, UserID: @UserProfileService.Get().UserId<br />
        <hr />
        Práva:
        <ul>
            @{
                foreach (var right in UserProfileService.Get().Rights)
                {
                    var roles = "";
                    foreach (var role in right.Roles)
                    {
                        if (roles.Length > 0)
                            roles += ", ";

                        Enum.TryParse(role, out UserProfileModel.ActionRightsDto.RoleType roleType);
                        switch (roleType)
                        {
                            case UserProfileModel.ActionRightsDto.RoleType.None:
                                roles += localizer["AuthorizationRoleType.None"];
                                break;
                                
                            case UserProfileModel.ActionRightsDto.RoleType.User:
                                roles += localizer["AuthorizationRoleType.User"];
                                break;
                                
                            case UserProfileModel.ActionRightsDto.RoleType.Owner:
                                roles += localizer["AuthorizationRoleType.Owner"];
                                break;
                                    
                            default:
                                break;
                        }
                    }
                    
                    <li>@right.Id - @string.Join(",", roles) - @right.ActionId</li>
                }
            }
        </ul>
    </Authorized>
    <NotAuthorized>
        Nejsi přihlášen
    </NotAuthorized>
</AuthorizeView>

@code {
    private AuthenticationState _authState = null;
    private IList<Protos.LiveUpdatesSubscription.LiveUpdatesSubscriptionItem> _notifications = new List<Protos.LiveUpdatesSubscription.LiveUpdatesSubscriptionItem>();

    [CascadingParameter] protected Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var claims = user.Claims;

            var userId = claims.FirstOrDefault(claim => claim.Type == "sub")?.Value ?? "";
            var firstName = claims.FirstOrDefault(claim => claim.Type == "given_name")?.Value ?? "";
            var lastName = claims.FirstOrDefault(claim => claim.Type == "family_name")?.Value ?? "";
            var emailClaim = claims.FirstOrDefault(claim => claim.Type == "email");

            var loggedUser = await LoadUserDataAsync();

            if (loggedUser == null || string.IsNullOrEmpty(loggedUser.Id))
            {
                await RegisterUserAsync(userId, emailClaim, firstName, lastName);
            }

            await LoadUserDataAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var stream = LiveUpdatesSubscriptionClient.subscribeForUpdates(new LiveUpdatesSubscriptionRequest
        {
            UserId = "",
            Created = DateTimeOffset.Now.ToGoogleDateTime(),
            Section = "Entries",
            AdditionalInfo = "tralalala"
        });
        
        while (stream.ResponseStream.Current != null)
        {
            _notifications.Add(stream.ResponseStream.Current);
            
            await stream.ResponseStream.MoveNext(CancellationToken.None);
        }
    }

    private async Task RegisterUserAsync(string userId, Claim emailClaim, string firstName, string lastName)
    {
        var model = new UserProfileModel
            {
                UserId = userId,
                CompetitorId = Guid.Empty,
                Contact = new UserProfileModel.ContactDto
                {
                    EmailAddress = emailClaim.Value
                },
                FirstName = firstName,
                LastName = lastName,
                Nickname = "",
                Birthday = DateTime.Now
            };

        var parameters = new ModalParameters()
            .Add(nameof(UserProfileModal.Model), model)
            .Add(nameof(UserProfileModal.RequiredAction), UserProfileRequiredAction.Register);

        var messageForm = modal.Show<UserProfileModal>("Registering user", parameters);
        var result = await messageForm.Result;
    }

    private async Task<UserProfileModel> LoadUserDataAsync()
    {
        var userProfile = await UserProfilesClient.getUserProfileAsync(new GetUserProfileRequest());

        if (userProfile == null)
            return null;

        UserProfileService.SetUserProfile(mapper.Map<UserProfileModel>(userProfile));

        // load all rights of current user
        var getActionRightsResponse = await ActionRightsClient.getActionRightsAsync(
            new Protos.ActionRights.GetActionRights.GetActionRightsRequest
            {
                Id = ""
            });

        var userRights = new List<UserProfileModel.ActionRightsDto>();
        foreach (var right in getActionRightsResponse.Rights)
        {
            userRights.Add(new UserProfileModel.ActionRightsDto
            {
                Id = right.Id,
                ActionId = right.ActionId,
                UserId = right.UserId,
                Roles = right.Roles
            });
        }

        UserProfileService.SetRights(userRights);

        return UserProfileService.Get();
    }
}
