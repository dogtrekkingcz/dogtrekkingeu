version: '3.4'

services:
  # For development - there is a need to configure certificates
  # -----------------------------------------------------------
  # Windows => Linux
  # dotnet dev-certs https --clean
  # dotnet dev-certs https -ep "$env:USERPROFILE\.aspnet\https\aspnetapp.pfx"  -p cert_password
  # dotnet dev-certs https --trust
  #
  # Linux
  # dotnet dev-certs https --clean
  # dotnet dev-certs https -ep ${HOME}/.aspnet/https/aspnetapp.pfx -p cert_password
  # dotnet dev-certs https --trust
  #
  # Linux production
  # docker compose run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ -d dogsontrail.eu
  certbot:
    image: certbot/certbot:latest
    volumes:
      - /dogsontrail_data/data_certbot/www/:/var/www/certbot/:rw
      - /dogsontrail_data/data_certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - frontend
      - backend

  dogsontrail_grpc:
    image: dogsontrail_server_grpc
    container_name: DogsOnTrail.gRPC
    build:
      context: .
      dockerfile: API.GRPCService/Dockerfile
    ports:
      - 4080:80
      - 4443:443
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+:80
    volumes:
      - /dogsontrail_data/data_certbot/www:/www:ro
    networks:
      - backend
      - frontend
      
  dogsontrail_webapi:
    image: dogsontrail_server_api
    container_name: DogsOnTrail.WebApi
    build:
      context: .
      dockerfile: API.WebApiService/Dockerfile
    ports:
      - 3080:80
      - 3443:443
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+:80
    volumes:
      - /dogsontrail_data/data_certbot/www:/www:ro
    networks:
      - frontend
      - backend
      
  dogsontrail_app: 
    image: dogsontrail_client_app
    container_name: DogsOnTrail.App
    build:
      context: .
      dockerfile: DogsOnTrailApp/Dockerfile
    ports:
      - 443:443
      - 80:80
    networks:
      - frontend
      - backend
      
  dtdata_db:
    image: mongo:latest
    container_name: DogsOnTrail.DB
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: DogsOnTrailDb
    ports:
      - 27017:27017
    volumes:
      - /dogsontrail_data/mongo_db:/data/db
    networks:
      - backend
   
  postgres:
    image: postgres
    container_name: DogsOnTrail.KeyCloakDB
    environment:
      POSTGRES_DB: keycl0ak
      POSTGRES_USER: keycl0ak
      POSTGRES_PASSWORD: password
    ports:
      - 5431:5431
    volumes:
      - /dogsontrail_data/postgres_db:/var/lib/postgresql/data
    networks:
      - backend

  keycloak:
    image: jboss/keycloak
    container_name: DogsOnTrail.KeyCloak
    command: 
      - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycl0ak
      DB_USER: keycl0ak
      DB_PASSWORD: password
      KEYCLOAK_USER: administrat0r
      KEYCLOAK_PASSWORD: asc88a8c0ssssqs
    ports:
      - 8080:8080
    volumes:
      - /dogsontrail_data/keycloak/imports:/opt/jboss/keycloak/imports
    depends_on:
      - postgres
    networks:
      - frontend
      - backend

  # MessageQueue not necessary yet
  #mq:
  #  image: rabbitmq:management
  #  container_name: message-queue
  #  ports:
  #    - 15672:15672
  #    - 5672:5672
  #    - 5671:5671
  #  volumes:
  #    - data_mq:/var/lib/rabbitmq
      
volumes:
  data_dogsontrail_db:
  data_mq:
  postgres_data:
      driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    
