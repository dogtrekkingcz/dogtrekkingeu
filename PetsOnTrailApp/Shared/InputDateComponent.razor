@using MapsterMapper
@using PetsOnTrailApp.Models

@inject IMapper Mapper
@inject IStringLocalizer<Resource> Localizer

<div class="container">
    <div class="row">
        <div class="col-9 col-sm-12">
            <input type="text" 
                   @ref="_refYearsInput" 
                   @bind="_years" 
                   @oninput="async (e)=> await YearsUpdatedAsync(e)" 
                   onfocus="this.select()" 
                   placeholder="@Localizer["InputTime.Years"]" 
                   style="width: 40px;" />-
            
            <input type="text" 
                   @ref="_refMonthsInput" 
                   @bind="_months" 
                   @oninput="async (e) => await MonthsUpdatedAsync(e)" 
                   onfocus="this.select()" 
                   placeholder="@Localizer["InputTime.Months"]" 
                   style="width: 30px;" />-
            
            <input type="text" 
                   @ref="_refDaysInput" 
                   @bind="_days" 
                   @oninput="async (e) => await DaysUpdatedAsync(e)" 
                   onfocus="this.select()" 
                   placeholder="@Localizer["InputTime.Days"]" 
                   style="width: 30px;" />
        </div>
    </div>
    <div class="row">
        <div class="col-3 col-sm-12">
            <input type="button" value="@Localizer["InputTime.ClearTime"]" @onclick="ClearDate"/>
        </div>
    </div>
</div>

@code {
    [Parameter] public DateTimeOffset? Date { get; set; }

    private string _years = "";
    private string _months = "";
    private string _days = "";

    private int? _iYears = null;
    private int? _iMonths = null;
    private int? _iDays = null;
    
    private ElementReference _refYearsInput;
    private ElementReference _refMonthsInput;
    private ElementReference _refDaysInput;
    
    [Parameter]
    public EventCallback<DateTimeOffset?> DateChanged { get; set; }
    
    private void ClearDate()
    {
        _iYears = null;
        _iMonths = null;
        _iDays = null;

        Reload();
    }

    private void Reload()
    {
        _years = _iYears?.ToString() ?? "";
        _months = _iMonths?.ToString() ?? "";
        _days = _iDays?.ToString() ?? "";

        if (_iYears != null && _iMonths != null && _iDays != null)
        {
            Date = new DateTime(_iYears.Value, _iMonths.Value, _iDays.Value);
            
            DateChanged.InvokeAsync(Date);
        }
        
        StateHasChanged();
    }

    private async Task YearsUpdatedAsync(ChangeEventArgs e)
    {
        int value = 0;
        
        if (e.Value == null || int.TryParse(e.Value.ToString(), out value) == false)
        {
            _iYears = null;
        }
        else
            _iYears = value;

        if (e.Value.ToString().Length == 4)
            await _refMonthsInput.FocusAsync();
        
        Reload();
    }
    
    private async Task MonthsUpdatedAsync(ChangeEventArgs e)
    {
        int value = 0;
        
        if (e.Value == null || int.TryParse(e.Value.ToString(), out value) == false)
        {
            _iMonths = null;
        }
        else
            _iMonths = value;

        if (e.Value.ToString().Length == 2)
            await _refDaysInput.FocusAsync();
        
        Reload();
    }
    
    private async Task DaysUpdatedAsync(ChangeEventArgs e)
    {
        int value = 0;
        
        if (e.Value == null || int.TryParse(e.Value.ToString(), out value) == false)
        {
            _iDays = null;
        }
        else
            _iDays = value;

        if (_iDays != null && _iDays > 0)
            Reload();
    }
}