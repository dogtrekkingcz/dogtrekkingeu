@page "/actions_map"
@using PetsOnTrailApp.Models
@using MapsterMapper
@using Google.Protobuf.WellKnownTypes
@inject Protos.Actions.Actions.ActionsClient Client
@inject IStringLocalizer<Resource> localizer
@inject IMapper mapper
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<h1>@localizer["Actions"]</h1>

<canvas id="theMapCanvas" />

@code {
    private List<ActionModel> _actionList = null;
        
    private const double Left = 12.0906633;
    private const double Right = 18.8591456;
    private const double Top = 51.0556997;
    private const double Bottom = 48.5519972;
    
    private Dictionary<string, GpsLocations> MapSettings { get; set; } = new Dictionary<string, GpsLocations>
    {
        {
            "images/maps/cr.png", new GpsLocations
            {
                Corners = new Dictionary<GpsLocationPosition, GpsLocation>
                {
                    {
                        GpsLocationPosition.TopLeft,
                        new GpsLocation
                        {
                            Latitude = 51.0556997,
                            Longitude = 12.0906633
                        }
                    },
                    {
                        GpsLocationPosition.TopRight,
                        new GpsLocation
                        {
                            Latitude = 51.0556997,
                            Longitude = 18.8591456
                        }
                    },
                    {
                        GpsLocationPosition.BottomLeft,
                        new GpsLocation
                        {
                            Latitude = 48.5519972,
                            Longitude = 12.0906633
                        }
                    },
                    {
                        GpsLocationPosition.BottomRight,
                        new GpsLocation
                        {
                            Latitude = 48.5519972,
                            Longitude = 18.8591456
                        }
                    }
                }
            }
        }
    };

    private record GpsLocations
    {
        public Dictionary<GpsLocationPosition, GpsLocation> Corners { get; set; }
    }

    private record GpsLocation
    {
        public double Latitude { get; set; }
        
        public double Longitude { get; set; }
        
        public string Text { get; set; }
    }

    private enum GpsLocationPosition
    {
        TopLeft,
        TopRight,
        BottomLeft,
        BottomRight
    };

    protected override async Task OnInitializedAsync()
    {
        Protos.Actions.GetPublicActionsList.GetPublicActionsListResponse response = await Client.getPublicActionsListAsync(new Empty());

        _actionList = mapper.Map<List<ActionModel>>(response.Actions);

        await RedrawPositions();
    }

    private async Task RedrawPositions()
    {
        List<GpsLocation> locationsToDraw = new List<GpsLocation>();
        
        foreach (var action in _actionList)
        {
            var position = action.Address?.Position ?? new ActionModel.LatLngDto { Latitude = double.NaN, Longitude = double.NaN }; 
            
            if (position is not { Latitude: double.NaN, Longitude: double.NaN })
            {
                locationsToDraw.Add(new GpsLocation
                {
                    Latitude = position.Latitude,
                    Longitude = position.Longitude,
                    Text = action.Name
                });
            }
        }

        // locationsToDraw.Add(new GpsLocation
        // {
        //     Latitude = 49.4432275,
        //     Longitude = 17.9490989,
        //     Text = "Praha"
        // });
        //
        // locationsToDraw.Add(new GpsLocation
        // {
        //     Latitude = 50.0875761,
        //     Longitude = 14.4370422,
        //     Text = "Krplov"
        // });

        await DrawPositions(locationsToDraw);
    } 

    private async Task DrawPositions(List<GpsLocation> locations)
    {
        await JsRuntime.InvokeVoidAsync(
            "drawMarkAtPosition", 
            "theMapCanvas", 
            "images/maps/cr.png", 
            locations, 
            Bottom, 
            Right, 
            Left);
    }
}