@page "/action/{ActionId}/create_entry"
@using PetsOnTrailApp.Shared
@using PetsOnTrailApp.Models
@using PetsOnTrailApp.Services
@using MapsterMapper
@using Protos.Actions
@using Protos.Actions.GetActionEntrySettings
@using Protos.Entries
@inject Protos.Entries.Entries.EntriesClient EntriesClient
@inject Protos.Actions.Actions.ActionsClient ActionsClient
@inject IStringLocalizer<Resource> localizer
@inject IMapper Mapper
@inject NavigationManager NavManager
@inject IUserProfileService UserProfileService

<h1>@localizer["Action.CreateEntry.For.Action"]</h1>

<CascadingValue Value="this">
    <EditForm Model="Entry" OnValidSubmit="SendAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
                
        <CreateEntryPersonComponent Model="Entry"></CreateEntryPersonComponent>

        <hr />
    
        <CreateEntryRaceCategoryComponent
            ActionSettings="ActionSettings"
            Model="Entry">
        </CreateEntryRaceCategoryComponent>

        <hr />
    
        @if (Entry.RaceId != null && Entry.RaceId != Guid.Empty)
        {
            if (ActionSettings.Races.First(r => r.Id == Entry.RaceId)?.Limits.WithDogs == true)
            {
                <CreateEntryDogsComponent
                    RaceLimits="@ActionSettings.Races.First(r => r.Id == Entry.RaceId)?.Limits"
                    Race="@ActionSettings.Races.First(r => r.Id == Entry.RaceId)"
                    Dogs="@Entry.Pets">
                </CreateEntryDogsComponent>
            }
        }

        @*     <ActionManageRacesComponent Model="Model"></ActionManageRacesComponent> *@
        @*     <ActionManageRacesComponent Model="Model"></ActionManageRacesComponent> *@

        <hr/>

        <button class="btn btn--radius-2 btn--red" type="submit" onClick="register()">@localizer["Action.CreateEntry.Submit"]</button>
    </EditForm>
</CascadingValue>

@code {

    [Parameter]
    public EntryModel Entry { get; set; } = new();

    [Parameter]
    public string ActionId { get; set; } = Guid.Empty.ToString();

    private bool SubmitEnabled { get; set; } = false;
    

    public ActionSettingsModel ActionSettings = new ActionSettingsModel();
    
    protected override async Task OnInitializedAsync()
    {
        var actionSettings = await ActionsClient.getActionEntrySettingsAsync(new GetActionEntrySettingsRequest { Id = ActionId });

        ActionSettings = Mapper.Map<ActionSettingsModel>(actionSettings);

        Entry.ActionId = Guid.Parse(actionSettings.Id);

        var userProfile = await UserProfileService.GetAsync();
        if (userProfile != null)
        {
            // TODO: enhance it !
            Entry.Name = userProfile.FirstName;
            Entry.Surname = userProfile.LastName;
            Entry.Email = userProfile.Contact.EmailAddress;
            Entry.Phone = userProfile.Contact.PhoneNumber;
            Entry.UserProfileId = userProfile.Id ?? Guid.Empty.ToString();
            Entry.CompetitorId = userProfile.CompetitorId.ToString();
            Entry.Pets = userProfile.Pets
                .Where(pet => pet.Decease == null)
                .Select(pet => new EntryModel.PetDto
                {
                    Id = pet.Id,
                    Name = pet.Name,
                    Birthday = pet.Birthday,
                    Chip = pet.Chip,
                    Pedigree = pet.Pedigree
                })
                .ToList();
        }
    }

    protected async Task SendAsync()
    {
        var createEntryRequest = Mapper.Map<Protos.Entries.CreateEntry.CreateEntryRequest>(Entry);
        createEntryRequest.LanguageCode = "cs-CZ";
        
        var response = await EntriesClient.createEntryAsync(createEntryRequest);
        
        if (string.IsNullOrWhiteSpace(response.Id) == false)
            NavManager.NavigateTo($"/entries");
    }

    public void RaceChanged()
    {
        StateHasChanged();
    }

    public void CategoryChanged()
    {
        StateHasChanged();
    }
}