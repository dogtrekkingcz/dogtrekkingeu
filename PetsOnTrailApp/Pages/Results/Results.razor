@page "/results/{ActionId}"
@using MapsterMapper
@using Protos.Actions.GetRacesForAction
@using PetsOnTrailApp.Models
@inject Protos.Results.Results.ResultsClient ResultsClient
@inject Protos.Actions.Actions.ActionsClient ActionsClient
@inject IStringLocalizer<Resource> Localizer
@inject IMapper Mapper

<h1>@Localizer["Results"]</h1>

@if (_races  == null)
{
    <p>
        <em>@Localizer["Loading ..."]</em>
    </p>
}
else
{
    foreach (var race in _races)
    {
        <div class="">
            @foreach (var category in race.Categories)
            {
                @* <ResultsAdd ActionId="@ActionId" Race="@race" Category="@category" OnResultAddedCallback="(result) => ResultAdded(ActionId, race.Id, category.Id, result)"></ResultsAdd> *@
                <ResultsCategory ActionId="@ActionId" Race="@race" Category="@category" />
            }
        </div>
    }
}

@code {
    [Parameter] public string ActionId { get; set; }
    private List<ActionModel.RaceDto> _races = null;
    
    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }

    private async Task ReloadData()
    {
        var response = await ActionsClient.getRacesForActionAsync(new GetRacesForActionRequest { ActionId = ActionId });

        _races = Mapper.Map<List<ActionModel.RaceDto>>(response.Races);
    }
}