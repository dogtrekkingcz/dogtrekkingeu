@page "/tracking"
@using GpsTracker.Services
@using GpsTracker.Services.Storage
@using MapsterMapper
@using GpsTracker.Auth0
@using SharedLib.Models
@using Google.Protobuf.WellKnownTypes
@using Protos.Activities.CreateActivity
@using SharedLib.Extensions
@using Google.Protobuf.Collections
@using Google.Type
@using Protos.Actions.CreateAction
@using Protos.Activities.GetMyActivities
@using DateTime = System.DateTime

@inject IGpsPositionService GpsPositionService;
@inject PositionHistoryService PositionHistoryService;
@inject IMapper Mapper;
@inject Auth0Client AuthClient;
@inject Protos.Actions.Actions.ActionsClient ActionsClientService;
@inject Protos.Activities.Activities.ActivitiesClient ActivitiesClientService;

@if (ServiceHelper.IsLoggedIn == false)
{
    <h1>Not logged in. Log in using this: <a href="/">link</a>.</h1>
}

<div class="container">
    <div class="row">
        <div class="col-sm-12 col-4">Aktivita:</div>
        <div class="col-sm-12 col-8">
            <select @bind="ServiceHelper.CurrentSelectedActivityId">
                <option value="@Guid.Empty.ToString()">--== Create new activity ==--</option>
                @foreach (var activity in Activities)
                {
                    <option value="@activity.Id.ToString()">@activity.Name</option>
                }
            </select>
        </div>
    </div>
    
    @if (ServiceHelper.CurrentSelectedActivityId == Guid.Empty.ToString())
    {
        <div class="row">
            <div class="col-sm-12 col-4">Název aktivity:</div>
            <div class="col-sm-12 col-8">
                <input type="text" @bind="ActivityName" />
                <button type="button" @onclick="async () => await CreateNewActivityAsync()">Vytvoř novou aktivitu</button>
            </div>
        </div>
    }
    
    <div class="row">
        <div class="col-sm-12 col-4">Je zařazena do veřejné akce:</div>
        <div class="col-sm-12 col-8">
            <select @bind="ServiceHelper.CurrentSelectedActionId">
                <option value="0">--== Vyber akci ==--</option>
                <option value="@Guid.Empty.ToString()">--== Přidat novou akci ==--</option>
                @foreach (var action in Actions
                    .Where(a => a.Term.From <= DateTimeOffset.Now && a.Term.To >= DateTimeOffset.Now))
                {
                    <option value="@action.Id.ToString()">@action.Name</option>
                }
            </select>
        </div>
    </div>
    
    @if (ServiceHelper.CurrentSelectedActionId == Guid.Empty.ToString())
    {
        <div class="row">
            <div class="col-sm-12 col-4">Název akce:</div>
            <div class="col-sm-12 col-8">
                <input type="text" @bind="ActionName" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-4">Druh akce:</div>
            <div class="col-sm-12 col-8">
                <select @bind="NewActionType">
                    <option value="@ActionType.Unspecified">Nespecifikována</option>
                    <option value="@ActionType.Trip">Výlet</option>
                    <option value="@ActionType.Dogtrekking">Dogtrekking</option>
                    <option value="@ActionType.RallyObedience">Rally Obedience</option>
                    <option value="@ActionType.Obedience">Obedience</option>
                    <option value="@ActionType.Agility">Agility</option>
                    <option value="@ActionType.Mushing">Mushing</option>
                    <option value="@ActionType.HorseMountainTrail">Horse mountain trail</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-4">Vypsané závody</div>
            <div class="col-sm-12 col-8">
                <ul>
                    @foreach (var race in NewActionRaces)
                    {
                        <li>@race.Name</li>
                    }
                    <li>
                        <input type="text" @bind="NewActionRace" placeholder="Nový závod"/>
                        <button type="button" @onclick="async () => await AddRaceToAction()">Přidat závod</button>
                    </li>
                </ul>
            </div>
        </div>
        
        <button type="button" @onclick="async () => await CreateNewActionAsync()">Vytvoř novou akci</button>
    }
    
    <div class="row">
        <div class="col-4">
            <button @onclick="StartGpsTrackerService">Start/Pokračovat</button>
        </div>
        <div class="col-4">
            <button @onclick="StopGpsTrackerService">Ukončení/pauznutí aktivity</button>
        </div>
    </div>
</div>

<hr />

<div class="container">
    <div class="row">
        <div class="col-6">
            @CurrentSpeed.ToString("F2") km/h
        </div>
        <div class="col-6">
            @CurrentDistance.ToString("F2") m
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            @CurrentWholeDistance.ToString("F2") m
        </div>
        <div class="col-6">
            @CurrentAvgSpeed.ToString("F2") km/h
        </div>
    </div>
</div>

@code {
    List<ActionModel> Actions { get; set; } = new();
    List<ActivityModel> Activities { get; set; } = new();
    private string ActivityName { get; set; } = string.Empty;
    private string ActionName { get; set; } = string.Empty;
    private ActionType NewActionType { get; set; } = ActionType.Unspecified;
    private List<RaceDto> NewActionRaces { get; set; } = new List<RaceDto>();
    private string NewActionRace { get; set; } = string.Empty;
    
    private string CurrentPosition { get; set; } = string.Empty;

    private Location CurrentLocation { get; set; } = new();
    
    private double CurrentDistance { get; set; } = double.NaN;
    private double CurrentSpeed { get; set; } = double.NaN;
    private double CurrentWholeDistance { get; set; } = double.NaN;
    private double CurrentAvgSpeed { get; set; } = double.NaN;

    private List<PositionHistoryService.PositionDto> History { get; set; } = new();

    private async Task ReloadData()
    {
        Protos.Actions.GetPublicActionsList.GetPublicActionsListResponse response = await ActionsClientService.getPublicActionsListAsync(new Empty());
        Actions = Mapper.Map<List<ActionModel>>(response.Actions);

        await ReloadActivities();
    }
    
    protected override async Task OnInitializedAsync()
    {
        ServiceHelper.OnLocationChanged += OnLocationChangeHandler;
        History = await PositionHistoryService.GetItemsAsync();
        
        await ReloadData();
    }

    private void StartGpsTrackerService()
    {
        ServiceHelper.Start();
    }
    
    private void StopGpsTrackerService()
    {
        ServiceHelper.Stop();
    }

    private async void OnLocationChangeHandler(Location location)
    {
        if (location == null)
            return;
        
        var oldLocation = CurrentLocation;
        CurrentLocation = location;

        var distanceAndSpeed = GetDistanceAndSpeed(oldLocation, CurrentLocation);
        CurrentDistance = distanceAndSpeed.distance;
        CurrentSpeed = distanceAndSpeed.speed;
        
        CurrentPosition = $"{location.Latitude}N, {location.Longitude}E";

        var distanceAndSpeedPerActivity = await GetDistanceAndSpeedPerActivityAsync();
        CurrentWholeDistance = distanceAndSpeedPerActivity.distance;
        CurrentAvgSpeed = distanceAndSpeedPerActivity.speed;

        Task.Run(async () => await InvokeAsync(StateHasChanged));
    }
    
    private async Task CreateNewActivityAsync()
    {
        var newActivity = await ActivitiesClientService.createActivityAsync(new CreateActivityRequest
        {
            Name = ActivityName,
            ActionId = ServiceHelper.CurrentSelectedActionId,
            RaceId = Guid.Empty.ToString(),
            CategoryId = Guid.Empty.ToString(),
            Description = string.Empty,
            Start = DateTimeOffset.Now.ToGoogleDateTime(),
            End = null,
            PetIds = { },
            IsPublic = true,
            Positions = { }
        });

        await ReloadActivities();

        ServiceHelper.CurrentSelectedActivityId = newActivity.Id;
        await PositionHistoryService.CleanHistoryAsync();

        StateHasChanged();
    }

    private async Task CreateNewActionAsync()
    {
        var now = DateTime.Now;
        var beginOfDay = new DateTime(now.Year, now.Month, now.Day, 0, 0, 0);
        var endOfDay = new DateTime(now.Year, now.Month, now.Day, 23, 59, 59);

        var currentPosition = await GpsPositionService.GetCurrentLocationAsync();
        
        var newAction = await ActionsClientService.createActionAsync(new CreateActionRequest
        {
            Name = ActivityName,
            Description = string.Empty,
            Term = new TermDto
            {
                From = ((DateTimeOffset) beginOfDay).ToGoogleDateTime(),
                To = ((DateTimeOffset) endOfDay).ToGoogleDateTime()
            },
            Address = new AddressDto
            {
                Position = new LatLng
                {
                    Latitude = currentPosition.Latitude,
                    Longitude = currentPosition.Longitude
                },
                City = string.Empty,
                Country = string.Empty,
                Region = string.Empty,
                Street = string.Empty,
                ZipCode = string.Empty
            },
            Checkpoints = {  },
            Sale = new(),
            ContactMail = string.Empty,
            Type = NewActionType,
            Races = { NewActionRaces }
        });
    }

    private async Task AddRaceToAction()
    {
        var now = DateTime.Now;
        var beginOfDay = new DateTime(now.Year, now.Month, now.Day, 0, 0, 0);
        
        NewActionRaces.Add(
            new RaceDto
            {
                Name = NewActionRace,
                Begin = ((DateTimeOffset) beginOfDay).ToGoogleDateTime()
            });
        
        StateHasChanged();
    }

    private async Task ReloadActivities()
    {
        Protos.Activities.GetMyActivities.GetMyActivitiesResponse myActivities = await ActivitiesClientService.getMyActivitiesAsync(new Protos.Activities.GetMyActivities.GetMyActivitiesRequest());
        
        Activities = new List<ActivityModel>(myActivities?.Activities?.Count ?? 0);
        foreach (var activity in myActivities?.Activities ?? new RepeatedField<ActivityDto>())
        {
            Activities.Add(Mapper.Map<ActivityModel>(activity));
        }

        StateHasChanged();
    }
    
    private async Task<(double distance, double speed)> GetDistanceAndSpeedPerActivityAsync()
    {
        var allItems = await PositionHistoryService.GetItemsAsync();

        var distance = 0.0;
        var speed = 0.0;

        var start = DateTimeOffset.MinValue;
        var end = DateTimeOffset.MinValue;

        Location locationBefore = null;

        foreach (var item in allItems.OrderBy(it => it.Id))
        {
            if (start == DateTimeOffset.MinValue)
                start = item.Time;

            if (end < item.Time)
                end = item.Time;
            
            var currentLocation = new Location
            {
                Latitude = item.Latitude,
                Longitude = item.Longitude,
                Altitude = item.Altitude,
                Accuracy = item.Accuracy,
                Course = item.Course
            };

            var distanceAndSpeed = GetDistanceAndSpeed(locationBefore, currentLocation);

            if (double.IsNaN(distanceAndSpeed.distance) != true)
                distance += distanceAndSpeed.distance;
            
            locationBefore = currentLocation;
        }

        var timeDiff = (end - start) / 1000;
        
        double speed_mps = distance / timeDiff.TotalMilliseconds;
        double speed_kph = (speed_mps * 3600.0) / 1000.0;
        
        return (distance, speed_kph);
    }
    
    private (double distance, double speed) GetDistanceAndSpeed(Location pos1, Location pos2)
    {
        if ((pos1 == null) || (pos2 == null))
            return (double.NaN, double.NaN);
        
        // Convert degrees to radians
        var lat1 = pos1.Latitude * Math.PI / 180.0;
        var lon1 = pos1.Longitude * Math.PI / 180.0;
        var lat2 = pos2.Latitude * Math.PI / 180.0;
        var lon2 = pos2.Longitude * Math.PI / 180.0;
    
        // radius of earth in metres
        const double r = 6378100;
    
        // P
        double rho1 = r * System.Math.Cos(lat1);
        double z1 = r * System.Math.Sin(lat1);
        double x1 = rho1 * System.Math.Cos(lon1);
        double y1 = rho1 * System.Math.Sin(lon1);
    
        // Q
        double rho2 = r * System.Math.Cos(lat2);
        double z2 = r * System.Math.Sin(lat2);
        double x2 = rho2 * System.Math.Cos(lon2);
        double y2 = rho2 * System.Math.Sin(lon2);
    
        // Dot product
        double dot = (x1 * x2 + y1 * y2 + z1 * z2);
        double cos_theta = dot / (r * r);
        double theta = System.Math.Acos(cos_theta);
        
        // Distance in Metres
        var distance = r * theta;
        var speed = 0.0;

        // timestamp is in milliseconds
        var timeDiff = (pos1.Timestamp - pos2.Timestamp) / 1000;
        
        double speed_mps = distance / timeDiff.TotalMilliseconds;
        double speed_kph = (speed_mps * 3600.0) / 1000.0;
        
        return (Math.Abs(distance), Math.Abs(speed_kph));
    }
}