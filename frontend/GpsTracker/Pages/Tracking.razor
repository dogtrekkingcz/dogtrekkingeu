@page "/tracking"
@using GpsTracker.Services
@using GpsTracker.Services.Storage
@using MapsterMapper
@using GpsTracker.Auth0
@using SharedLib.Models
@using Google.Protobuf.WellKnownTypes
@using Protos.Activities.CreateActivity
@using SharedLib.Extensions
@using Google.Protobuf.Collections
@using Protos.Activities.GetMyActivities

@inject IGpsPositionService GpsPositionService;
@inject PositionHistoryService PositionHistoryService;
@inject IMapper Mapper;
@inject Auth0Client AuthClient;
@inject Protos.Actions.Actions.ActionsClient ActionsClientService;
@inject Protos.Activities.Activities.ActivitiesClient ActivitiesClientService;

@if (ServiceHelper.IsLoggedIn == false)
{
    <h1>Not logged in. Log in using this: <a href="/">link</a>.</h1>
}

<div class="container">
    <div class="row">
        <div class="col-sm-12 col-4">Aktivita:</div>
        <div class="col-sm-12 col-8">
            <select @bind="ServiceHelper.CurrentSelectedActivityId">
                <option value="@Guid.Empty.ToString()">--== Create new activity ==--</option>
                @foreach (var activity in Activities)
                {
                    <option value="@activity.Id.ToString()">@activity.Name</option>
                }
            </select>
        </div>
    </div>
    
    @if (ServiceHelper.CurrentSelectedActivityId == Guid.Empty.ToString())
    {
        <div class="row">
            <div class="col-sm-12 col-4">Název aktivity:</div>
            <div class="col-sm-12 col-8">
                <input type="text" @bind="ActivityName" />
                <button type="button" @onclick="async () => await CreateNewActivityAsync()">Create new activity</button>
            </div>
        </div>
    }
    
    <div class="row">
        <div class="col-sm-12 col-4">Patří do akce:</div>
        <div class="col-sm-12 col-8">
            <select @bind="SelectedActionId">
                <option value="0">--== Select action ==--</option>
                @foreach (var action in Actions
                    .Where(a => a.Term.From <= DateTimeOffset.Now && a.Term.To >= DateTimeOffset.Now))
                {
                    <option value="@action.Id.ToString()">@action.Name</option>
                }
            </select>
        </div>
    </div>
    
    <div class="row">
        <div class="col-4">
            <button @onclick="@(async () => await StartGpsTrackerServiceAsync())">Start/Pokračovat</button>
        </div>
        <div class="col-4">
            <button @onclick="@(async () => await StopGpsTrackerServiceAsync())">Ukončení/pauznutí aktivity</button>
        </div>
    </div>
</div>

<hr />

<div class="container">
    <div class="row">
        <div class="col-6">
            @CurrentSpeed
        </div>
        <div class="col-6">
            @CurrentDistance
        </div>
    </div>
</div>

@code {
    List<ActionModel> Actions { get; set; } = new();
    List<ActivityModel> Activities { get; set; } = new();
    private string ActivityName { get; set; } = string.Empty;
    
    private string CurrentPosition { get; set; } = string.Empty;

    private Location CurrentLocation { get; set; } = new();
    
    private double CurrentDistance { get; set; } = double.NaN;
    private double CurrentSpeed { get; set; } = double.NaN;

    private List<PositionHistoryService.PositionDto> History { get; set; } = new();

    private string SelectedActionId
    {
        get { return ServiceHelper.CurrentSelectedActionId; }
        set { ServiceHelper.CurrentSelectedActionId = value; }
    }

    private async Task ReloadData()
    {
        Protos.Actions.GetPublicActionsList.GetPublicActionsListResponse response = await ActionsClientService.getPublicActionsListAsync(new Empty());
        Actions = Mapper.Map<List<ActionModel>>(response.Actions);

        Protos.Activities.GetMyActivities.GetMyActivitiesResponse myActivities = await ActivitiesClientService.getMyActivitiesAsync(new Protos.Activities.GetMyActivities.GetMyActivitiesRequest());

        Activities = new List<ActivityModel>(myActivities?.Activities?.Count ?? 0);
        foreach (var activity in myActivities?.Activities ?? new RepeatedField<ActivityDto>())
        {
            Activities.Add(Mapper.Map<ActivityModel>(activity));
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        GpsPositionService.OnChange += OnChangeHandler;
        ServiceHelper.OnLocationChanged += OnLocationChangeHandler;
        History = await PositionHistoryService.GetItemsAsync();
        
        await ReloadData();
    }

    private async Task StartGpsTrackerServiceAsync()
    {
        ServiceHelper.Start();
    }

    private async void OnChangeHandler()
    {
        CurrentPosition = $"{GpsPositionService.CurrentPosition.Latitude}N, {GpsPositionService.CurrentPosition.Longitude}E";
        
        await InvokeAsync(StateHasChanged);
    }

    private async void OnLocationChangeHandler(Location location)
    {
        var oldLocation = CurrentLocation;
        CurrentLocation = location;

        var distanceAndSpeed = GetDistanceAndSpeed(oldLocation, CurrentLocation);
        CurrentDistance = distanceAndSpeed.distance;
        CurrentSpeed = distanceAndSpeed.speed;
        
        CurrentPosition = $"{location.Latitude}N, {location.Longitude}E";
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task StopGpsTrackerServiceAsync()
    {
        ServiceHelper.Stop();
    }

    private async Task CreateNewActivityAsync()
    {
        var newActivity = await ActivitiesClientService.createActivityAsync(new CreateActivityRequest
        {
            Name = ActivityName,
            ActionId = SelectedActionId,
            RaceId = Guid.Empty.ToString(),
            CategoryId = Guid.Empty.ToString(),
            Description = string.Empty,
            Start = DateTimeOffset.Now.ToGoogleDateTime(),
            End = null,
            PetIds = { },
            IsPublic = true,
            Positions = { }
        });
        
        Protos.Activities.GetMyActivities.GetMyActivitiesResponse myActivities = await ActivitiesClientService.getMyActivitiesAsync(new Protos.Activities.GetMyActivities.GetMyActivitiesRequest());
        Activities = Mapper.Map<List<ActivityModel>>(myActivities);
        
        await InvokeAsync(StateHasChanged);

        ServiceHelper.CurrentSelectedActivityId = newActivity.Id;
        await PositionHistoryService.CleanHistoryAsync();

        await InvokeAsync(StateHasChanged);
    }
    
    private (double distance, double speed) GetDistanceAndSpeed(Location pos1, Location pos2)
    {
        // Convert degrees to radians
        var lat1 = pos1.Latitude * Math.PI / 180.0;
        var lon1 = pos1.Longitude * Math.PI / 180.0;
        var lat2 = pos2.Latitude * Math.PI / 180.0;
        var lon2 = pos2.Longitude * Math.PI / 180.0;
    
        // radius of earth in metres
        const double r = 6378100;
    
        // P
        double rho1 = r * System.Math.Cos(lat1);
        double z1 = r * System.Math.Sin(lat1);
        double x1 = rho1 * System.Math.Cos(lon1);
        double y1 = rho1 * System.Math.Sin(lon1);
    
        // Q
        double rho2 = r * System.Math.Cos(lat2);
        double z2 = r * System.Math.Sin(lat2);
        double x2 = rho2 * System.Math.Cos(lon2);
        double y2 = rho2 * System.Math.Sin(lon2);
    
        // Dot product
        double dot = (x1 * x2 + y1 * y2 + z1 * z2);
        double cos_theta = dot / (r * r);
        double theta = System.Math.Acos(cos_theta);
        
        // Distance in Metres
        var distance = r * theta;
        var speed = 0.0;

        // timestamp is in milliseconds
        var timeDiff = (pos1.Timestamp - pos2.Timestamp) / 1000;
        
        double speed_mps = distance / timeDiff.TotalMilliseconds;
        double speed_kph = (speed_mps * 3600.0) / 1000.0;
        
        return (distance, speed);
    }
}