@page "/tracking"
@using GpsTracker.Services
@using GpsTracker.Services.Storage
@using MapsterMapper
@using GpsTracker.Auth0
@using SharedLib.Models
@using Google.Protobuf.WellKnownTypes
@using Protos.Activities.CreateActivity

@inject IGpsPositionService GpsPositionService;
@inject PositionHistoryService PositionHistoryService;
@inject IMapper Mapper;
@inject Auth0Client AuthClient;
@inject Protos.Actions.Actions.ActionsClient ActionsClientService;
@inject Protos.Activities.Activities.ActivitiesClient ActivitiesClientService;

Current position is: @CurrentPosition

<select @bind="ServiceHelper.CurrentSelectedActivityId">
    <option value="@Guid.Empty.ToString()">--== Create new activity ==--</option>
    @foreach (var activity in Activities)
    {
        <option value="@activity.Id.ToString()">@activity.Name</option>
    }
</select>

@if (ServiceHelper.CurrentSelectedActivityId == Guid.Empty.ToString())
{
    <input type="text" @bind="ActivityName" />
    <button type="button" @onclick="async () => await CreateNewActivityAsync()">Create new activity</button>
}

<select @bind="SelectedActionId">
    <option value="0">--== Select action ==--</option>
    @foreach (var action in Actions
        .Where(a => a.Term.From <= DateTimeOffset.Now && a.Term.To >= DateTimeOffset.Now))
    {
        <option value="@action.Id.ToString()">@action.Name</option>
    }
</select>

<button @onclick="@(async () => await StartGpsTrackerServiceAsync())">Start gps tracker service</button>
<button @onclick="@(async () => await StopGpsTrackerServiceAsync())">Stop gps tracker service</button>

<div class="container">
    @{
        int counter = 20;
    }
    @foreach (var pos in History.OrderByDescending(h => h.Time))
    {
        if (counter == 0)
            break;

        counter--;
        
        <div class="row">
            <div class="col-4">@pos.Time.ToString("dd HH:mm:ss")</div>
            <div class="col-8">@pos.Latitude N, @pos.Longitude E</div>
        </div>
    }
</div>

@code {
    List<ActionModel> Actions { get; set; } = new();
    List<ActivityModel> Activities { get; set; } = new();
    private string ActivityName { get; set; } = string.Empty;
    
    private string CurrentPosition { get; set; } = string.Empty;

    private List<PositionHistoryService.PositionDto> History { get; set; } = new();

    private string SelectedActionId
    {
        get { return ServiceHelper.CurrentSelectedActionId; }
        set { ServiceHelper.CurrentSelectedActionId = value; }
    }


    private async Task ReloadData()
    {
        Protos.Actions.GetPublicActionsList.GetPublicActionsListResponse response = await ActionsClientService.getPublicActionsListAsync(new Empty());
        Actions = Mapper.Map<List<ActionModel>>(response.Actions);

        Protos.Activities.GetMyActivities.GetMyActivitiesResponse myActivities = await ActivitiesClientService.getMyActivitiesAsync(new Empty());
        Activities = Mapper.Map<List<ActivityModel>>(myActivities.Activities);
    }
    
    protected override async Task OnInitializedAsync()
    {
        GpsPositionService.OnChange += OnChangeHandler;
        ServiceHelper.OnLocationChanged += OnLocationChangeHandler;
        History = await PositionHistoryService.GetItemsAsync();
        
        await ReloadData();
    }

    private async Task StartGpsTrackerServiceAsync()
    {
        ServiceHelper.Start();
    }

    private async void OnChangeHandler()
    {
        CurrentPosition = $"{GpsPositionService.CurrentPosition.Latitude}N, {GpsPositionService.CurrentPosition.Longitude}E";
        History = await PositionHistoryService.GetItemsAsync();
        
        await InvokeAsync(StateHasChanged);
    }

    private async void OnLocationChangeHandler(Location location)
    {
        CurrentPosition = $"{location.Latitude}N, {location.Longitude}E";
        History = await PositionHistoryService.GetItemsAsync();
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task StopGpsTrackerServiceAsync()
    {
        ServiceHelper.Stop();
    }

    private async Task CreateNewActivityAsync()
    {
        var newActivity = await ActivitiesClientService.createActivityAsync(new CreateActivityRequest
        {
            Name = ActivityName
        });

        ServiceHelper.CurrentSelectedActivityId = newActivity.Id;

        await InvokeAsync(StateHasChanged);
    }
    
}