@page "/actions"
@using MapsterMapper
@using SharedLib.Models
@using Google.Protobuf.WellKnownTypes

@inject Protos.Actions.Actions.ActionsClient ActionsClientService;
@inject IMapper Mapper;

<h1>Actions</h1>

@if (_actionList  == null)
{
    <p>
        <em>Loading ...</em>
    </p>
}
else
{
<table class="table">
        <thead>
        <tr>
            <th>Term & Address</th>
            <th>Name & Description</th>
            <th>Enrolled Races</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var action in _actionList)
        {
            <tr>
                <td>
                    <div class="container">
                        <div class="row">
                            <div class="col-12">@action.Term?.From.ToString("d.M. yyyy") - @action.Term?.To.ToString("d.M. yyyy")</div>
                            <div class="col-12">@action.Address?.Country, @action.Address?.Region, @action.Address?.City</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="container">
                        <div class="row">
                            <div class="col-12">@action.Name</div>
                            <div class="col-12">@action.Description</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="container">
                        <div class="row">
                            @foreach (var race in @action.Races)
                            {
                                <div class="col-12">
                                    @race.Name
                                    
                                    @{
                                        var isFirst = true;

                                        var categoriesPerRace = "";
                                        foreach (var ctg in race.Categories)
                                        {
                                            if (isFirst == false)
                                                categoriesPerRace += ", ";

                                            categoriesPerRace += ctg.Name;

                                            isFirst = false;
                                        }
                                    }

                                    [ @categoriesPerRace ]
                                </div>    
                            }
                        </div>
                    </div>
                </td>
                <td>
                    <ActionDropDown Model="@action"></ActionDropDown>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<ActionModel> _actionList = null;
    
    private SortingOptions _sortingOptionsValue = SortingOptions.ApprovedWithLockedTermByDate;
    private SortingOptions SortingOptionsValue
    {
        get { return _sortingOptionsValue; }
        set { _sortingOptionsValue = value; SortActions(); }
    }
    
    private enum SortingOptions
    {
        AllByDate = 1,
        ApprovedByDate = 2,
        ApprovedWithLockedTermByDate = 3
    };

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }
    
    private async Task ReloadData()
    {
        Protos.Actions.GetPublicActionsList.GetPublicActionsListResponse response = await ActionsClientService.getPublicActionsListAsync(new Empty());

        _actionList = Mapper.Map<List<ActionModel>>(response.Actions);
                
        SortActions();
    }

    private void SortActions()
    {
        switch (SortingOptionsValue)
        {
            case SortingOptions.AllByDate:
                _actionList = _actionList
                    .OrderBy(action => action.Term?.From).ToList();
                break;
                
            case SortingOptions.ApprovedWithLockedTermByDate:
                _actionList = _actionList
                    .OrderByDescending(action => action.Term?.From)
                    .ToList();
                break;
                
            case SortingOptions.ApprovedByDate:
                _actionList = _actionList
                    .OrderByDescending(action => action.Term?.From)
                    .ToList();
                break;
        }
        
        StateHasChanged();
    }
}