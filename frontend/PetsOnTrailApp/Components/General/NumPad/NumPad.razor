@inject IJSRuntime JSRuntime

<div class="numpad-overlay" @onclick="CloseNumpad">
    <div class="numpad-container" @onclick:stopPropagation>
        <div class="numpad">
            @for (int i = 1; i <= 9; i++)
            {
                <button @onclick="() => AppendNumber(i.ToString())">@i</button>
            }
            <button @onclick="() => AppendNumber(0.ToString())">0</button>
            <button class="cancel" @onclick="Cancel">Cancel</button>
            <button class="ok" @onclick="OK">OK</button>
        </div>
    </div>
</div>

@code {
    private ElementReference currentInput;
    private string currentValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeNumpad", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void ShowNumpad(ElementReference input)
    {
        currentInput = input;
        currentValue = "";
        StateHasChanged();
    }

    private void AppendNumber(string number)
    {
        currentValue += number;
        JSRuntime.InvokeVoidAsync("updateInputValue", currentInput, currentValue);
    }

    private void Cancel()
    {
        currentValue = "";
        JSRuntime.InvokeVoidAsync("updateInputValue", currentInput, currentValue);
        CloseNumpad();
    }

    private void OK()
    {
        JSRuntime.InvokeVoidAsync("updateInputValue", currentInput, currentValue);
        CloseNumpad();
    }

    private void CloseNumpad()
    {
        JSRuntime.InvokeVoidAsync("hideNumpad");
    }
}
