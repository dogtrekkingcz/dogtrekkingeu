@page "/entries"
@using Google.Protobuf.Collections
@using MapsterMapper
@using PetsOnTrailApp.Extensions
@using SharedLib.Models
@inject Protos.Entries.Entries.EntriesClient Client
@inject Protos.Actions.Actions.ActionsClient ActionsClient
@inject AuthenticationStateProvider AuthStateProvider 
@inject IStringLocalizer<Resource> localizer
@inject IMapper mapper
@inject NavigationManager NavManager

<h1>@localizer["Entries"]</h1>

@if (_entriesList  == null)
{
    <p>
        <em>@localizer["Loading ..."]</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>@localizer["Surname"], @localizer["Name"]</th>
            <th>Action - Race - Category</th>
            <th>Dogs</th>
            <th>State</th>
            <th>@localizer["Actions"]</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var entry in _entriesList)
        {
            <tr>
                <td>
                    @entry.Surname, @entry.Name
                </td>
                <td>
                    @ResolveActionRaceCategory(entry)
                </td>
                <td>
                    <ul>
                        @foreach (var pet in entry.Pets)
                        {
                            <li>@pet.Chip - @pet.Birthday?.ToString("yyyy-MM-dd") - @pet.Pedigree - @pet.Name</li>
                        }
                    </ul>
                </td>
                <td>
                    @entry.State.ToString()
                </td>
                <td>
                    <ActionDropDown Model="@entry">
                        
                    </ActionDropDown>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<EntryModel> _entriesList = null;

    private List<ActionModel> _actionsList = null;

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        Protos.Entries.GetAllEntries.GetAllEntriesResponse response = await Client.getAllEntriesAsync(new Protos.Entries.GetAllEntriesRequest());

        _entriesList = mapper.Map<List<EntryModel>>(response.Entries);

        StateHasChanged();

        var ids = _entriesList.Select(entry => entry.ActionId.ToString()).Distinct().ToList();
        
        var selectedActions = await ActionsClient.getSelectedActionsAsync(new Protos.Actions.GetSelectedActions.GetSelectedActionsRequest
        {
            Ids = { ids }
        });

        if (null != selectedActions?.Actions)
            _actionsList = mapper.Map<List<ActionModel>>(selectedActions.Actions);
        
        StateHasChanged();
    }

    private string ResolveActionRaceCategory(EntryModel entry)
    {
        var ret = "";
        
        if (_actionsList == null)
        {
            ret = $"{entry.ActionId} - {entry.RaceId} - {entry.CategoryId}";
        }
        else
        {
            var action = _actionsList.First(a => a.Id == entry.ActionId);

            var race = action.Races.First(r => r.Id == entry.RaceId);

            var category = race.Categories.First(c => c.Id == entry.CategoryId);

            ret = $"{action?.Name ?? entry.ActionId.ToString()} - {race?.Name ?? entry.RaceId.ToString()} - {category?.Name ?? entry.CategoryId.ToString()}";
        }

        return ret;
    }
}