@page "/results/{ActionId}"
@using MapsterMapper
@using Protos.Actions.GetAction
@using Protos.Actions.GetRacesForAction
@using Protos.Actions.GetResultsForAction
@using SharedLib.Models
@inject Protos.Results.Results.ResultsClient ResultsClient
@inject Protos.Actions.Actions.ActionsClient ActionsClient
@inject IStringLocalizer<Resource> Localizer
@inject IMapper Mapper

<h1>@Localizer["Results"]</h1>

@if (Model == null)
{
    <p>
        <em>@Localizer["Loading ..."]</em>
    </p>
}
else
{
    foreach (var race in Model.Races)
    {
        <div class="">
            @foreach (var category in race.Categories)
            {
                var actionRace = Action.Races.FirstOrDefault(r => r.Id == race.Id);

                <ResultsAdd 
                    ActionId="@ActionId" 
                    RaceId="@race.Id"
                    RaceBegin="@actionRace.Begin"
                    CategoryId="@category.Id" 
                    @* OnResultAddedCallback="(result) => ResultAdded(ActionId, race.Id, category.Id, result)" *@
                ></ResultsAdd>
                <hr />
                <ResultsCategory ActionId="@ActionId" Race="@race" Category="@category" />
            }
        </div>
    }
}

@code {
    [Parameter] public string ActionId { get; set; }
    private ActionResultsModel Model = null;
    private ActionModel Action = null;
    
    protected override async Task OnInitializedAsync()
    {
        Action = Mapper.Map<ActionModel>(await ActionsClient.getActionAsync(new GetActionRequest() { Id = ActionId }));

        await ReloadData();
    }

    private async Task ReloadData()
    {
        var response = await ActionsClient.getResultsForActionAsync(new GetResultsForActionRequest() { ActionId = ActionId });

        Model = Mapper.Map<ActionResultsModel>(response);
    }
}