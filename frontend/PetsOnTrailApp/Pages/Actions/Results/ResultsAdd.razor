@using MapsterMapper
@using Protos.Results
@using PetsOnTrailApp.Shared
@using PetsOnTrailApp.Extensions
@using SharedLib.Extensions
@using SharedLib.Models
@using PetsOnTrailApp.Components
@using System.Text.RegularExpressions

@inject IStringLocalizer<Resource> Localizer
@inject Protos.Results.Results.ResultsClient ResultsClient
@inject IMapper Mapper

<h3>@Localizer["Results.Manage.Add"]</h3>
<section>
    <div class="container">
        <div class="form-group row">
            <label class="col-sm-3">@Localizer["Results.Manage.Add.Firstname"]</label>
            <InputText class="form-control col-sm-8" @bind-Value="@Model.FirstName" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">@Localizer["Results.Manage.Add.Lastname"]</label>
            <InputText class="form-control col-sm-8" @bind-Value="@Model.LastName" />
        </div>
        <div class="form-group row">
            <label for="startDate" class="col-sm-3">@Localizer["Results.Manage.Add.Start"]</label>
            <InputDateTime id="startDate" class="form-control col-sm-8" @bind-Value="@Model.Start" @bind:after="StartChanged"></InputDateTime>
        </div>
        <div class="form-group row">
            <label for="finishDate" class="col-sm-3">@Localizer["Results.Manage.Add.Finish"]</label>
            <InputDateTime id="finishDate" class="form-control col-sm-8" @bind-Value="@Model.Finish" @bind:after="FinishChanged"></InputDateTime>
        </div>
        <div class="form-group row">
            <label class="col-sm-3">@Localizer["Results.Manage.Add.WholeTime"]</label>
            <InputText class="form-control col-sm-8" Value="@WholeTime" ValueChanged="WholeTimeChanged" ValueExpression="() => WholeTime" placeholder="hh:mm:ss / hh:mm / hh"></InputText>
        </div>
    </div>
</section>
<button @onclick="@(async () => await SubmitAsync())" class="btn btn-primary">@Localizer["Results.AddResult.Submit"]</button>

@code {
    [Parameter] public string ActionId { get; set; }
    [Parameter] public Guid RaceId { get; set; }
    [Parameter] public Guid CategoryId { get; set; }
    [Parameter] public DateTimeOffset RaceBegin { get; set; }

    [Parameter]
    public EventCallback<ActionModel.RacerDto> OnResultAddedCallback { get; set; }

    private ActionModel.RacerDto Model = new();
    private AddNewResult_FinalState State { get; set; }
    private string WholeTime { get; set; } = string.Empty;

    protected async Task SubmitAsync()
    {
        await ResultsClient.addResultAsync(new AddResultRequest {
            ActionId = ActionId,
            RaceId = RaceId.ToString(),
            CategoryId = CategoryId.ToString(),
            FirstName = Model.FirstName,
            LastName = Model.LastName,
            Phone = Model.Phone,
            Email = Model.Email,
            State = Mapper.Map<AddResultRequest_FinalState>(State),
            Start = Model.Start.ToGoogleDateTime(),
            Finish = Model.Finish.ToGoogleDateTime()
        });

        await OnResultAddedCallback.InvokeAsync(Model);
    }

    private void StartChanged()
    {
        if (Model.Start.HasValue && Model.Finish.HasValue)
        {
            WholeTime = Model.Finish.Value.Subtract(Model.Start.Value).ToString(@"hh\:mm\:ss");
        }

        StateHasChanged();
    }

    private void FinishChanged()
    {
        if (Model.Start.HasValue && Model.Finish.HasValue)
        {
            WholeTime = Model.Finish.Value.Subtract(Model.Start.Value).ToString(@"hh\:mm\:ss");
        }

        StateHasChanged();
    }

    private void WholeTimeChanged(string val)
    {
        int hours = 0, minutes = 0, seconds = 0;

        if (Regex.IsMatch(val, @"^[a-zA-Z0-9,.:]+$") == false)
            return;

        string[] split = val.Split(new Char[] { ',', ':', '.' });
        switch (split.Length)
        {
            case 3: // hh:mm:ss
                hours = int.Parse(split[0]);
                minutes = int.Parse(split[1]);
                seconds = int.Parse(split[2]);
                break;

            case 2: // hh:mm
                hours = int.Parse(split[0]);
                minutes = int.Parse(split[1]);
                break;

            case 1: // hh
                hours = int.Parse(split[0]);
                break;

            default:
                break;
        }

        Model.Start = RaceBegin;
        Model.Finish = RaceBegin.AddHours(hours).AddMinutes(minutes).AddSeconds(seconds);

        StateHasChanged();
    }
}