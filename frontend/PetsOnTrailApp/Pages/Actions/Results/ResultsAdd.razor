@using MapsterMapper
@using Protos.Results
@using PetsOnTrailApp.Shared
@using PetsOnTrailApp.Extensions
@using SharedLib.Extensions
@using SharedLib.Models
@using PetsOnTrailApp.Components
@using System.Text.RegularExpressions

@inject IStringLocalizer<Resource> Localizer
@inject Protos.Results.Results.ResultsClient ResultsClient
@inject IMapper Mapper

<h3>@Localizer["Results.Manage.Add"]</h3>
<section>
    <EditForm Model="@Model" OnValidSubmit="OnFormValid" OnInvalidSubmit="OnFormInvalid" FormName="FormResultAdd">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">
            <div class="form-group row">
                <label class="col-sm-3">@Localizer["Results.Manage.Add.Firstname"]</label>
                <InputText class="form-control col-sm-8" @bind-Value="@Model.FirstName" />
            </div>
            <div class="form-group row">
                <label class="col-sm-3">@Localizer["Results.Manage.Add.Lastname"]</label>
                <InputText class="form-control col-sm-8" @bind-Value="@Model.LastName" />
            </div>
            <div class="form-group row">
                <label class="col-sm-3">@Localizer["Results.Manage.Add.Pets"]</label>
                <InputText class="form-control col-sm-8" Value="@_pets" ValueChanged="PetsChanged" ValueExpression="() => _pets" placeholder="@Localizer["Results.Manage.Add.Pets.DividedByComma"]" />
            </div>
            <div class="form-group row">
                <label for="startDate" class="col-sm-3">@Localizer["Results.Manage.Add.Start"]</label>
                <InputDateTime id="startDate" class="form-control col-sm-8" @bind-Value="Start" @onblur="StartIsFilled"></InputDateTime>
                <ValidationMessage class="offset-sm-3 col-sm-8" For="(()=>Model.Start)"></ValidationMessage>
            </div>
            <div class="form-group row">
                <label for="finishDate" class="col-sm-3">@Localizer["Results.Manage.Add.Finish"]</label>
                <InputDateTime id="finishDate" class="form-control col-sm-8" @bind-Value="Finish" @onblur="FinishIsFilled"></InputDateTime>
                <ValidationMessage class="offset-sm-3 col-sm-8" For="(()=>Model.Finish)"></ValidationMessage>
            </div>
            <div class="form-group row">
                <label class="col-sm-3">@Localizer["Results.Manage.Add.WholeTime"]</label>
                <InputText class="form-control col-sm-8" Value="@WholeTime" ValueChanged="WholeTimeChanged" ValueExpression="() => WholeTime" placeholder="hh:mm:ss / hh:mm / hh"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <button type="submit" class="btn btn-primary">@Localizer["Results.Manage.Add.Submit"]</button>
        </div>
    </EditForm>
</section>


@code {
    [Parameter] public string ActionId { get; set; }
    [Parameter] public Guid RaceId { get; set; }
    [Parameter] public Guid CategoryId { get; set; }
    [Parameter] public DateTimeOffset RaceBegin { get; set; }

    [Parameter]
    public EventCallback OnResultAddedCallback { get; set; }

    private ActionModel.RacerDto Model = new();
    private AddNewResult_FinalState State { get; set; }
    private string WholeTime { get; set; } = string.Empty;
    private string _pets { get; set; } = string.Empty;

    private DateTimeOffset Start { get; set; }
    private DateTimeOffset Finish { get; set; }

    private async Task OnFormValid()
    {
        await ResultsClient.addResultAsync(new AddResultRequest {
            ActionId = ActionId,
            RaceId = RaceId.ToString(),
            CategoryId = CategoryId.ToString(),
            FirstName = Model.FirstName,
            LastName = Model.LastName,
            Phone = Model.Phone,
            Email = Model.Email,
            Start = Model.Start.ToGoogleDateTime(),
            Finish = Model.Finish.ToGoogleDateTime(),
            Pets = { Model.Pets.Select(pet => pet.Name) }
        });

        await OnResultAddedCallback.InvokeAsync((ActionId, RaceId, CategoryId, Model));
    }

    private async Task OnFormInvalid() {

    }

    private void StartIsFilled(FocusEventArgs args)
    {
        Model.Start = Start;

        StartAndFinishIsFilledCountResult();
    }

    private void FinishIsFilled(FocusEventArgs args)
    {
        Model.Finish = Finish;

        StartAndFinishIsFilledCountResult();
    }

    private void StartAndFinishIsFilledCountResult()
    {
        Console.WriteLine("StartAndFinishIsFilledCountResult");

        if (Model.Start.HasValue && Model.Finish.HasValue)
        {
            Console.WriteLine("StartAndFinishIsFilledCountResult - both filled");

            var diff = Model.Finish.Value.Subtract(Model.Start.Value);
            var hours = diff.TotalHours;

            diff -= TimeSpan.FromHours(hours);
            var minutes = diff.TotalMinutes;

            diff -= TimeSpan.FromMinutes(minutes);
            var seconds = diff.TotalSeconds;

            Console.WriteLine($"Hours: {hours}, Minutes: {minutes}, Seconds: {seconds}");
            WholeTime = $"{hours}:{minutes}:{seconds}";

            StateHasChanged();
        }
    }

    private void PetsChanged(string pets)
    {
        if (string.IsNullOrWhiteSpace(pets))
        {
            Model.Pets = new List<ActionModel.PetDto>();
            return;
        }

        var petsArray = pets.Split(new char[] { ',', ':', '.' });

        Model.Pets = petsArray
                        .Select(p => new ActionModel.PetDto { Name = p })
                        .ToList();
    }

    private void WholeTimeChanged(string val)
    {
        int hours = 0, minutes = 0, seconds = 0;

        if (Regex.IsMatch(val, @"^[a-zA-Z0-9,.:]+$") == false)
            return;

        string[] split = val.Split(new Char[] { ',', ':', '.' });
        switch (split.Length)
        {
            case 3: // hh:mm:ss
                hours = int.Parse(split[0]);
                minutes = int.Parse(split[1]);
                seconds = int.Parse(split[2]);
                break;

            case 2: // hh:mm
                hours = int.Parse(split[0]);
                minutes = int.Parse(split[1]);
                break;

            case 1: // hh
                hours = int.Parse(split[0]);
                break;

            default:
                break;
        }

        Model.Start = RaceBegin;
        Model.Finish = RaceBegin.AddHours(hours).AddMinutes(minutes).AddSeconds(seconds);

        StateHasChanged();
    }
}