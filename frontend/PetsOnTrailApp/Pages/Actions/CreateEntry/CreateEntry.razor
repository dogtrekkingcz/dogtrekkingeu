@page "/action/{ActionId}/create_entry"
@using PetsOnTrailApp.Shared
@using PetsOnTrailApp.Services
@using MapsterMapper
@using Protos.Actions
@using Protos.Actions.GetActionEntrySettings
@using Protos.Entries
@using SharedLib.Models
@inject Protos.Entries.Entries.EntriesClient EntriesClient
@inject Protos.Actions.Actions.ActionsClient ActionsClient
@inject IStringLocalizer<Resource> localizer
@inject IMapper Mapper
@inject NavigationManager NavManager
@inject IUserProfileService UserProfileService

<h1>@localizer["Action.CreateEntry.For.Action"]</h1>

<CascadingValue Value="this">
    @if (_loading)
    {
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    }
    else
    {
        <EditForm Model="Entry" OnValidSubmit="SendAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
                
            <CreateEntryPersonComponent Model="Entry"></CreateEntryPersonComponent>

            <hr />
    
            <CreateEntryRaceCategoryComponent
                ActionSettings="ActionSettings"
                Model="Entry">
            </CreateEntryRaceCategoryComponent>

            <hr />
    
            @if (Entry.RaceId != null && Entry.RaceId != Guid.Empty)
            {
                if (ActionSettings.Races.First(r => r.Id == Entry.RaceId)?.Limits.WithPets == true)
                {
                    <CreateEntryPetsComponent
                        RaceLimits="@ActionSettings.Races.First(r => r.Id == Entry.RaceId)?.Limits"
                        Race="@ActionSettings.Races.First(r => r.Id == Entry.RaceId)"
                        Pets="@Entry.Pets">
                    </CreateEntryPetsComponent>
                }
            }

            @*     <ActionManageRacesComponent Model="Model"></ActionManageRacesComponent> *@
            @*     <ActionManageRacesComponent Model="Model"></ActionManageRacesComponent> *@

            <hr/>

            <button class="btn btn--radius-2 btn--red" type="submit" onClick="register()">@localizer["Action.CreateEntry.Submit"]</button>
        </EditForm>
    }
</CascadingValue>

@code {

    [Parameter]
    public EntryModel Entry { get; set; } = new();

    [Parameter]
    public string ActionId { get; set; } = Guid.Empty.ToString();

    private bool SubmitEnabled { get; set; } = false;

    private bool _loading = true;


    public ActionSettingsModel ActionSettings = new ActionSettingsModel();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("create_entry: OnInitializeAsync start");

        var actionSettings = await ActionsClient.getActionEntrySettingsAsync(new GetActionEntrySettingsRequest { Id = ActionId });

        Console.WriteLine("create_entry: ActionSettings: " + actionSettings);

        ActionSettings = Mapper.Map<ActionSettingsModel>(actionSettings);

        Console.WriteLine("create_entry: Mapping ok");

        Entry.ActionId = Guid.Parse(actionSettings.Id);

        
        var userProfile = await UserProfileService.GetAsync();
        if (userProfile != null)
        {
            // TODO: enhance it !
            Entry.FirstName = userProfile.FirstName;
            Entry.LastName = userProfile.LastName;
            Entry.Email = userProfile.Contact.EmailAddress;
            Entry.Phone = userProfile.Contact.PhoneNumber;
            Entry.UserId = userProfile.Id;
            Entry.CompetitorId = userProfile.CompetitorId.ToString();
            Entry.Pets = userProfile.Pets
                .Where(pet => pet.Decease == null)
                .Select(pet => new EntryModel.PetDto
                {
                    Id = pet.Id,
                    Name = pet.Name,
                    Birthday = pet.Birthday,
                    Chip = pet.Chip,
                    Pedigree = pet.Pedigree
                })
                .ToList();
        }

        Console.WriteLine("create_entry: OnInitializeAsync end, setting loading to false and StateHasChanged calling");

        _loading = false;

        StateHasChanged();
    }

    protected async Task SendAsync()
    {
        var createEntryRequest = Mapper.Map<Protos.Entries.CreateEntry.CreateEntryRequest>(Entry);
        createEntryRequest.LanguageCode = "cs-CZ";
        
        var response = await EntriesClient.createEntryAsync(createEntryRequest);
        
        if (string.IsNullOrWhiteSpace(response.Id) == false)
            NavManager.NavigateTo($"/entries");
    }

    public void RaceChanged()
    {
        StateHasChanged();
    }

    public void CategoryChanged()
    {
        StateHasChanged();
    }
}