@page "/actions"
@using Protos
@using System.Security.Claims
@using DogtrekkingCzApp.Models
@using MapsterMapper
@inject GrpcChannel Channel
@inject AuthenticationStateProvider AuthStateProvider 
@inject IModalService modal
@inject IStringLocalizer<Resource> localizer
@inject IMapper mapper

<h1>@localizer["Actions"]</h1>

@if (_actionList  == null)
{
    <p>
        <em>@localizer["Loading ..."]</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>@localizer["Term & address of action"]</th>
            <th>@localizer["Name & description of action"]</th>
            <th>@localizer["Enrolled races"]</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var action in _actionList)
        {
            <tr>
                <td>
                    <div class="container">
                        <div class="row">
                            <div class="col-12">@action.Term?.From.ToString("d.M.") - @action.Term?.To.ToString("d.M.")</div>
                            <div class="col-12">@action.Address?.Country, @action.Address?.Region, @action.Address?.City</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="container">
                        <div class="row">
                            <div class="col-12">@action.Name</div>
                            <div class="col-12">@action.Description</div>
                            <div class="col-12">@action.Owner?.FirstName @action.Owner?.FamilyName</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="container">
                        <div class="row">
                            <div class="col-12">LONG</div>
                            <div class="col-12">MID</div>
                        </div>
                    </div>
                </td>
                <td>
                    <ActionDropDown PassedAction=@action OnItemChanged=@HandleOnItemChanged></ActionDropDown>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <AuthorizeView>
        <Authorized>
            <button @onclick="@(async () => await PrepareToAddAction())" class="btn btn-primary">Add action ...</button>            
        </Authorized>
    </AuthorizeView>
}

@code {
    private Protos.Actions.Actions.ActionsClient _client = null;
    private List<ActionModel> _actionList = null;
    private AuthenticationState _authState = null;

    protected override async Task OnInitializedAsync()
    {
        _client = new Protos.Actions.Actions.ActionsClient(Channel);
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();

        await ReloadData();
    }

    protected async Task PrepareToAddAction()
    {
        var addedActionModel = new ActionModel
        {
            Address = new ActionModel.AddressDto
            {
                Country = "ČR"
            },
            Owner = new ActionModel.OwnerDto
            {
                Id = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "jti")?.Value ?? "",
                Email = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "email")?.Value ?? "",
                FirstName = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "given_name")?.Value ?? "",
                FamilyName = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "family_name")?.Value ?? ""
            },
            Term = new ActionModel.TermDto
            {
                From = DateTime.Now,
                To = DateTimeOffset.Now.AddDays(3)
            }
        };
        
        var parameters = new ModalParameters()
            .Add(nameof(ActionModal.PassedAction), addedActionModel)
            .Add(nameof(ActionModal.RequiredAction), RequiredActionEnum.AddAction);

        var messageForm = modal.Show<ActionModal>("Adding action", parameters);
        var result = await messageForm.Result;

        if (result.Confirmed)
        {
            await ReloadData();
        }
    }

    private async Task ReloadData()
    {
        Protos.Actions.GetAllActionsResponse response = await _client.getAllActionsAsync(new Protos.Actions.GetAllActionsRequest());

        _actionList = mapper.Map<IList<ActionModel>>(response.Actions)
            .OrderBy(action => action.Term?.From)
            .ToList();
        
        _actionList
            .ForEach(action =>
            {
                action.Term ??= new ActionModel.TermDto
                {
                    From = DateTime.Now,
                    To = DateTime.Now.AddDays(3)
                };
                action.Address ??= new();
                action.Owner ??= new();
            });
        
        StateHasChanged();
    }
    
    public async Task HandleOnItemChanged(ActionModel action)
    {
        await ReloadData();
    }
}