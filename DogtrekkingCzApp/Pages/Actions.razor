@page "/actions"
@using Protos
@using System.Security.Claims
@inject GrpcChannel Channel
@inject IModalService modal
@inject IStringLocalizer<Resource> localizer

<h1>@localizer["Actions"]</h1>

@if (_actionList  == null)
{
    <p>
        <em>@localizer["Loading ..."]</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>@localizer["Term"]</th>
            <th>@localizer["ActionName"]</th>
            <th>@localizer["Enrolled races"]</th>
            <th>Owner</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var action in _actionList)
        {
            <tr>
                <td>@action.Term?.From</td>
                <td>@action.Name</td>
                <td>@action.Description</td>
                <td>@action.Owner?.FirstName @action.Owner?.FamilyName (@action.Owner?.Id / @action.Owner?.Email)</td>
                <td>
                    <ActionDropDown PassedAction=@action OnItemChanged=@HandleOnItemChanged></ActionDropDown>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <AuthorizeView>
        <Authorized>
            <button @onclick="@(async () => await PrepareToAddAction())" class="btn btn-primary">Add action ...</button>            
        </Authorized>
    </AuthorizeView>
}

@code {
    private Protos.Actions.Actions.ActionsClient _client = null;
    private IList<Protos.Actions.ActionDto> _actionList = null;

    protected override async Task OnInitializedAsync()
    {
        _client = new Protos.Actions.Actions.ActionsClient(Channel);

        await ReloadData();
    }

    protected async Task PrepareToAddAction()
    {
        var messageForm = modal.Show<ActionModal>("Adding action");
        var result = await messageForm.Result;

        if (result.Confirmed)
        {
            await ReloadData();
        }
    }

    private async Task ReloadData()
    {
        Protos.Actions.GetAllActionsResponse response = await _client.getAllActionsAsync(new Protos.Actions.GetAllActionsRequest());

        _actionList = response.Actions;
        
        StateHasChanged();
    }
    
    public async Task HandleOnItemChanged(Protos.Actions.ActionDto action)
    {
        await ReloadData();
    }
}