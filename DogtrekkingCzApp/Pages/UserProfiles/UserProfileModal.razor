@using MapsterMapper
@using DogtrekkingCzApp.Models
@using Protos.UserProfiles
@inject Protos.UserProfiles.UserProfiles.UserProfilesClient Client
@inject AuthenticationStateProvider AuthStateProvider 
@inject IStringLocalizer<Resource> localizer
@inject IMapper mapper

<div>
    <EditForm Model="@Model" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-md-6">
                    <InputText @bind-Value="@Model.FirstName"></InputText>
                </div>
                <div class="col-xs-12 col-md-6">
                    <InputText @bind-Value="@Model.LastName"></InputText>
                </div>
                <div class="col-xs-12 col-md-6">
                    <InputText @bind-Value="@Model.Email"></InputText>
                </div>
            </div>
            
            <div class="row">
                <div class="col">
                    @{
                        var registrationButtonText = localizer["Register user"];
                        if (RequiredAction == UserProfileRequiredAction.Update)
                            registrationButtonText = localizer["Update user"];
                    }
                    <button type="submit">@registrationButtonText</button>
                </div>
                <div class="col">
                    <button @onclick="Cancel">@localizer["Cancel"]</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private UserProfileModel _model;

    [Parameter]
    public UserProfileModel Model
    {
        get { return _model; }
        set { _model = value; FixModel(); }
    }
    [Parameter] public UserProfileRequiredAction RequiredAction { get; set; }

    private AuthenticationState _authState = null;
    
    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();
    }
    
    private async Task SubmitForm()
    {
        if (RequiredAction == UserProfileRequiredAction.Register)
        {
            var request = new CreateUserProfileRequest
            {
                UserProfile = mapper.Map<UserProfileDto>(Model)
            };
            
            await Client.registerUserProfileAsync(request);
        }
        else
        {
            var request = new UpdateUserProfileRequest
            {
                UserProfile = mapper.Map<UserProfileDto>(Model)
            };
            
            await Client.updateUserProfileAsync(request);
        }
        
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }

    private void FixModel()
    {
        Model.CompetitorId ??= Guid.Empty;
        Model.Dogs ??= new List<UserProfileModel.DogDto>();
        Model.Address ??= new();
        Model.Contact ??= new();
    }

    private async Task Cancel()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel());
    }
}