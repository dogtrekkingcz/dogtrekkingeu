@inject GrpcChannel Channel
@inject AuthenticationStateProvider AuthStateProvider
@inject IModalService modal

@page "/"
@using Protos.UserProfiles
@using DogtrekkingCzApp.Models
@using DogtrekkingCzApp.Pages.UserProfiles

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        Jsi přihlášen jako @context.User.Identity?.Name!
    </Authorized>
    <NotAuthorized>
        Nejsi přihlášen
    </NotAuthorized>
</AuthorizeView>

@code {
    private Protos.UserProfiles.UserProfiles.UserProfilesClient _client = null;
    private AuthenticationState _authState = null;

    protected override async Task OnInitializedAsync()
    {
        _client = new Protos.UserProfiles.UserProfiles.UserProfilesClient(Channel);
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (_authState?.User?.Identity?.IsAuthenticated == true && _authState?.User?.Claims != null)
        {
            var claims = _authState.User.Claims;
            var emailClaim = claims.FirstOrDefault(claim => claim.Type == "email");
            var firstName = claims.FirstOrDefault(claim => claim.Type == "given_name")?.Value ?? "";
            var lastName = claims.FirstOrDefault(claim => claim.Type == "family_name")?.Value ?? "";
            
            if (emailClaim != null)
            {
                var request = new GetUserProfileRequest
                {
                    Email = emailClaim.Value
                };
                
                if (string.IsNullOrEmpty(request.Email) == false)
                {
                    var response = await _client.getUserProfileAsync(request);

                    if (string.IsNullOrEmpty(response?.UserProfile?.Id))
                    {
                        var model = new UserProfileModel
                        {
                            Email = emailClaim?.Value ?? "",
                            FirstName = firstName,
                            LastName = lastName
                        };

                        var parameters = new ModalParameters()
                            .Add(nameof(UserProfileModal.Model), model)
                            .Add(nameof(UserProfileModal.RequiredAction), UserProfileRequiredAction.Register);

                        var messageForm = modal.Show<UserProfileModal>("Registering user", parameters);
                        var result = await messageForm.Result;
                    }
                }
            }
        }
    }
}
