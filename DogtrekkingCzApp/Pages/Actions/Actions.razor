@page "/actions"
@using Protos
@using System.Security.Claims
@using DogtrekkingCzApp.Models
@using DogtrekkingCzApp.Pages.Actions.Manage
@using MapsterMapper
@inject Protos.Actions.Actions.ActionsClient Client
@inject AuthenticationStateProvider AuthStateProvider 
@inject IModalService modal
@inject IStringLocalizer<Resource> localizer
@inject IMapper mapper

<h1>@localizer["Actions"]</h1>

@if (_actionList  == null)
{
    <p>
        <em>@localizer["Loading ..."]</em>
    </p>
}
else
{
    <InputSelect @bind-Value="SortingOptionsValue">
        <option value="@SortingOptions.ApprovedWithLockedTermByDate">@localizer["Approved and term locked by date"]</option>
        <option value="@SortingOptions.ApprovedByDate">@localizer["Approved by date"]</option>
        <option value="@SortingOptions.AllByDate">@localizer["All by date"]</option>
    </InputSelect>
    <table class="table">
        <thead>
        <tr>
            <th>@localizer["Term & address of action"]</th>
            <th>@localizer["Name & description of action"]</th>
            <th>@localizer["Enrolled races"]</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var action in _actionList)
        {
            var approved = action.Flags?.Approved ?? false ? "approved" : "non-approved";
            var termLocked = action.Flags?.TermLocked ?? false ? "term-locked" : "term-unlocked";
            
            <tr class="@approved">
                <td>
                    <div class="container">
                        <div class="row">
                            <div class="col-12 @termLocked">@action.Term?.From.ToString("d.M.") - @action.Term?.To.ToString("d.M.")</div>
                            <div class="col-12">@action.Address?.Country, @action.Address?.Region, @action.Address?.City</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="container">
                        <div class="row">
                            <div class="col-12">@action.Name</div>
                            <div class="col-12">@action.Description</div>
                            <div class="col-12">@action.Owner?.FirstName @action.Owner?.FamilyName</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="container">
                        <div class="row">
                            @foreach (var race in @action.Races)
                            {
                                <div class="col-12">@race.Name
                                    <ul>
                                        @foreach (var ctg in race.Categories)
                                        {
                                            <li>@ctg</li>
                                        }
                                    </ul>
                                </div>    
                            }
                        </div>
                    </div>
                </td>
                <td>
                    <ActionDropDown PassedAction=@action OnItemChanged=@HandleOnItemChanged></ActionDropDown>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <AuthorizeView>
        <Authorized>
            <button @onclick="@(async () => await PrepareToAddAction())" class="btn btn-primary">Add action ...</button>            
        </Authorized>
    </AuthorizeView>
}

@code {
    private List<ActionModel> _actionList = null;
    private AuthenticationState _authState = null;

    private SortingOptions _sortingOptionsValue = SortingOptions.ApprovedWithLockedTermByDate;
    private SortingOptions SortingOptionsValue
    {
        get { return _sortingOptionsValue; }
        set { _sortingOptionsValue = value; SortActions(); }
    }
    
    private enum SortingOptions
    {
        AllByDate = 1,
        ApprovedByDate = 2,
        ApprovedWithLockedTermByDate = 3
    };

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();

        await ReloadData();
    }

    protected async Task PrepareToAddAction()
    {
        var addedActionModel = new ActionModel
        {
            Address = new ActionModel.AddressDto
            {
                Country = "ČR"
            },
            Owner = new ActionModel.OwnerDto
            {
                Id = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "oid")?.Value ?? "",
                Email = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "email")?.Value ?? "",
                FirstName = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "given_name")?.Value ?? "",
                FamilyName = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "family_name")?.Value ?? ""
            },
            Term = new ActionModel.TermDto
            {
                From = DateTime.Now,
                To = DateTimeOffset.Now.AddDays(3)
            }
        };
        
        var parameters = new ModalParameters()
            .Add(nameof(ActionModal.Model), addedActionModel)
            .Add(nameof(ActionModal.RequiredAction), RequiredActionEnum.AddAction);

        var messageForm = modal.Show<ActionModal>("Adding action", parameters);
        var result = await messageForm.Result;

        if (result.Confirmed)
        {
            await ReloadData();
        }
    }

    private async Task ReloadData()
    {
        Protos.Actions.GetAllActionsResponse response = await Client.getAllActionsAsync(new Protos.Actions.GetAllActionsRequest());

        _actionList = mapper.Map<List<ActionModel>>(response.Actions);
        
        _actionList
            .ForEach(action =>
            {
                action.Term ??= new ActionModel.TermDto
                {
                    From = DateTime.Now,
                    To = DateTime.Now.AddDays(3)
                };
                action.Address ??= new();
                action.Owner ??= new();
                action.Flags ??= new ActionModel.FlagsDto { Approved = false, TermLocked = false, IsCanceled = false, IsHidden = false, CancelledReason = "" };
            });
        
        SortActions();
    }

    private void SortActions()
    {
        switch (SortingOptionsValue)
        {
            case SortingOptions.AllByDate:
                _actionList = _actionList
                    .OrderBy(action => action.Term?.From).ToList();
                break;
                
            case SortingOptions.ApprovedWithLockedTermByDate:
                _actionList = _actionList
                    .OrderByDescending(action => action.Flags.Approved)
                    .ThenByDescending(action => action.Flags.TermLocked)
                    .ThenBy(action => action.Term?.From)
                    .ToList();
                    break;
                
            case SortingOptions.ApprovedByDate:
                    _actionList = _actionList
                        .OrderByDescending(action => action.Flags.Approved)
                        .ThenBy(action => action.Term?.From)
                        .ToList();
                    break;
        }
        
        StateHasChanged();
    }
    
    public async Task HandleOnItemChanged(ActionModel action)
    {
        await ReloadData();
    }
}