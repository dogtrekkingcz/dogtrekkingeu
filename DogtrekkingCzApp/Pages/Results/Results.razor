@page "/results/{ActionId}"
@using DogtrekkingCzApp.Models
@using DogtrekkingCzShared.Entities
@using MapsterMapper
@using Protos.Results
@inject Protos.Results.Results.ResultsClient ResultsClient
@inject AuthenticationStateProvider AuthStateProvider 
@inject IStringLocalizer<Resource> Localizer
@inject IMapper Mapper
@inject NavigationManager NavManager

<h1>@Localizer["Results"]</h1>

@if (_races  == null)
{
    <p>
        <em>@Localizer["Loading ..."]</em>
    </p>
}
else
{
    foreach (var race in _races)
    {
        <div class="">
            @foreach (var category in race.Categories)
            {
                <ResultsAdd ActionId="@ActionId" Race="@race" Category="@category" OnResultAddedCallback="(result) => ResultAdded(ActionId, race.Id, category.Id, result)"></ResultsAdd>
                
                <table class="table">
                    <thead>
                    <tr>
                        <th>@Localizer["#"]</th>
                        <th>@Localizer["Results.List.Lastname"]</th>
                        <th>@Localizer["Results.List.Firstname"]</th>
                        <th>@Localizer["Results.List.Start"]</th>
                        <th>@Localizer["Results.List.Finish"]</th>
                        <th>@Localizer["Results.List.WholeTime"]</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var racer in category.Racers
                        .OrderBy(r =>
                        {
                            var totalTime = r.Finish.HasValue && r.Start.HasValue ? r.Finish.Value - r.Start.Value : TimeSpan.MaxValue;
                            return (int) totalTime.TotalSeconds;
                        }))
                    {
                        var totalTime = racer.Finish.HasValue && racer.Start.HasValue ? racer.Finish.Value - racer.Start.Value : TimeSpan.MaxValue;
                        string time = totalTime == System.TimeSpan.MaxValue ? "--:--:--" : (int) totalTime.TotalHours + totalTime.ToString(@"\:mm\:ss");

                        <tr>
                            <td>
                                <div class="col-12">?</div>
                            </td>
                            <td>
                                <div class="col-12">@racer.LastName</div>
                            </td>
                            <td>
                                <div class="col-12">@racer.FirstName</div>
                            </td>
                            <td>
                                <div class="col-12">@racer.Start?.ToString("dd HH:mm:ss")</div>
                            </td>
                            <td>
                                <div class="col-12">@racer.Finish?.ToString("dd HH:mm:ss")</div>
                            </td>
                            <td>
                                <div class="col-12">@time</div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    }
}

@code {
    [Parameter] public string ActionId { get; set; }
    private List<RaceDto> _races = null;

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }

    private async Task ReloadData()
    {
        Protos.Results.GetRacesForActionResponse response = await ResultsClient.getRacesForActionAsync(new GetRacesForActionRequest { ActionId = ActionId });

        _races = Mapper.Map<List<RaceDto>>(response.Races);
    }

    private void ResultAdded(string actionId, Guid raceId, Guid categoryId, RacerDto addedRacer)
    {
        _races.First(r => r.Id == raceId)
            .Categories.First(c => c.Id == categoryId)
            .Racers.Add(addedRacer);

        StateHasChanged();
    }
}