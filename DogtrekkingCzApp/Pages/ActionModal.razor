@using System.Security.Claims
@using DogtrekkingCzApp.Models
@using Microsoft.AspNetCore.Components
@using Protos
@using Protos.Actions
@inject GrpcChannel Channel
@inject AuthenticationStateProvider AuthStateProvider 

<div>
    <EditForm Model="@Model" OnValidSubmit="SubmitForm">
        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-md-6">
                    <label for="message">Name</label>
                </div>
                <div class="col-xs-12 col-md-6">
                    <InputText @bind-Value="@Model.Name"/>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12 col-md-6">
                    <label for="description">Description</label>
                </div>
                <div class="col-xs-12 col-md-6">
                    <InputText @bind-Value="@Model.Description"/>
                </div>
            </div>
        

            <hr />
            
            <div class="row">
                <div class="col">
                    <button type="submit">Submit</button>
                </div>
                <div class="col">
                    <button @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private ActionModel Model = new();
    private Protos.Actions.Actions.ActionsClient _client = null;
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private Protos.Actions.ActionDto _editingAction = null;
    [Parameter] public Protos.Actions.ActionDto? PassedAction
    {
        get { return _editingAction; }
        set
        {
            if (_editingAction != null)
                return;
            
            _editingAction = value;
            
            Model.Name = value.Name;
            Model.Description = value.Description;
        }
    }
    
    [Parameter]
    public EventCallback<Protos.Actions.ActionDto> OnItemChanged { get; set; } 

    private AuthenticationState _authState = null;
    
    protected override async Task OnInitializedAsync()
    {
        _client = new Protos.Actions.Actions.ActionsClient(Channel);
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();
    }
    
    private async Task SubmitForm()
    {
        if (PassedAction != null)
            await UpdateAction(PassedAction);
        else
            await CreateNewAction();
        
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }

    private async Task Cancel() => await BlazoredModal.CancelAsync();
    
    private async Task CreateNewAction()
    {
        var item = new Protos.Actions.CreateActionRequest
        {
            Action = new ActionDto
            {
                Owner = new Protos.Actions.OwnerDto
                {
                    Id = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "jti")?.Value ?? "",
                    Email = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "email")?.Value ?? "",
                    FirstName = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "given_name")?.Value ?? "",
                    FamilyName = _authState.User.Claims.FirstOrDefault(claim => claim.Type == "family_name")?.Value ?? ""
                },

                Name = Model.Name,
                Description = Model.Description
            }
        };
        
        var result = await _client.createActionAsync(item);

        if (string.IsNullOrEmpty(result.Id) == false)
        {
            await OnItemChanged.InvokeAsync(item.Action);
        }
    }

    private async Task UpdateAction(Protos.Actions.ActionDto action)
    {
        var updateActionRequest = new Protos.Actions.UpdateActionRequest
        {
            Action = new Protos.Actions.ActionDto
            {
                Id = action.Id,
                
                Owner = new OwnerDto
                {
                    Id = action.Owner.Id,
                    Email = action.Owner.Email,
                    FamilyName = action.Owner.FamilyName,
                    FirstName = action.Owner.FirstName
                },
                
                Name = Model.Name,
                Description = Model.Description    
            }
        };

        var result = await _client.updateActionAsync(updateActionRequest);
        
        if (string.IsNullOrEmpty(result.Id) == false)
        {
            await OnItemChanged.InvokeAsync(updateActionRequest.Action);
        }
    }
}