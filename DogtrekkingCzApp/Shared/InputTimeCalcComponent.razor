@using MapsterMapper
@using DogtrekkingCzApp.Models
@using Google.Type

@inject IMapper Mapper
@inject IStringLocalizer<Resource> Localizer

<div class="container">
    <div class="row">
        <div class="col">
            <input type="text" size="1" @ref="_refDaysInput" @bind="_days" @oninput="async (e)=> await DaysUpdatedAsync(e)" onfocus="this.select()" placeholder="@Localizer["InputTime.Days"]"/>
            <input type="text" size="1" @ref="_refHoursInput" @bind="_hours" @oninput="async (e) => await HoursUpdatedAsync(e)" onfocus="this.select()" placeholder="@Localizer["InputTime.Hours"]"/>:
            <input type="text" size="1" @ref="_refMinutesInput" @bind="_minutes" @oninput="async (e) => await MinutesUpdatedAsync(e)" onfocus="this.select()" placeholder="@Localizer["InputTime.Minutes"]"/>:
            <input type="text" size="1" @ref="_refSecondsInput" @bind="_seconds" @oninput="async (e) => await SecondsUpdatedAsync(e)" onfocus="this.select()" placeholder="@Localizer["InputTime.Seconds"]"/>
            <input type="button" value="@Localizer["InputTime.ClearTime"]" @onclick="ClearDate" />
            <input type="text" size="2" readonly="readonly" @BindAttributes="_totalSeconds" />
        </div>
    </div>
</div>

@code {
    [Parameter] public InputTimeSpanModel Model { get; set; }

    private string _days = "";
    private string _hours = "";
    private string _minutes = "";
    private string _seconds = "";
    private string _totalSeconds = "";

    private int? _iDays = null;
    private int? _iHours = null;
    private int? _iMinutes = null;
    private int? _iSeconds = null;
    
    private ElementReference _refDaysInput;
    private ElementReference _refHoursInput;
    private ElementReference _refMinutesInput;
    private ElementReference _refSecondsInput;
    
    private void ClearDate()
    {
        Model.Value = null;

        _iDays = null;
        _iHours = null;
        _iMinutes = null;
        _iSeconds = null;

        Reload();
    }

    private void Reload()
    {
        _days = _iDays?.ToString() ?? "";
        _hours = _iHours?.ToString() ?? "";
        _minutes = _iMinutes?.ToString() ?? "";
        _seconds = _iSeconds?.ToString() ?? "";

        if (_iDays != null && _iHours != null && _iMinutes != null && _iSeconds != null)
        {
            Model.IsValid = true;
            Model.Value = new Google.Protobuf.WellKnownTypes.Timestamp
            {
                Seconds = _iDays.Value * 24 
                          + _iHours.Value * 60 
                          + _iMinutes.Value * 60 
                          + _iSeconds.Value
            };

            _totalSeconds = (_iDays.Value * 24
                             + _iHours.Value * 60
                             + _iMinutes.Value * 60
                             + _iSeconds.Value)
                .ToString();
        }
        else
        {
            Model.IsValid = false;
            Model.Value = null;
        }
        
        StateHasChanged();
    }

    private async Task DaysUpdatedAsync(ChangeEventArgs e)
    {
        int value = 0;
        
        if (e.Value == null || int.TryParse(e.Value.ToString(), out value) == false)
        {
            _iDays = null;
        }
        else
            _iDays = value;

        if (e.Value.ToString().Length == 2)
            await _refHoursInput.FocusAsync();
        
        Reload();
    }

    private async Task HoursUpdatedAsync(ChangeEventArgs e)
    {
        int value = 0;
        
        if (e.Value == null || int.TryParse(e.Value.ToString(), out value) == false)
        {
            _iHours = null;
        }
        else 
        {
            _iHours = value;

            while (_iHours > 23)
            {
                _iDays++;
                _iHours -= 24;
            }
        }

        if (e.Value.ToString().Length == 2)
            await _refMinutesInput.FocusAsync();
        
        Reload();
    }

    private async Task MinutesUpdatedAsync(ChangeEventArgs e)
    {
        int value = 0;
        
        if (e.Value == null || int.TryParse(e.Value.ToString(), out value) == false) 
        {
            _iMinutes = null;
        }
        else
        {
            _iMinutes = value;

            while (_iMinutes > 59)
            {
                _iHours++;
                _iMinutes -= 60;

                if (_iHours > 23)
                {
                    _iDays++;
                    _iHours -= 24;
                }
            }
        }

        if (e.Value.ToString().Length == 2)
            await _refSecondsInput.FocusAsync();
        
        Reload();
    }

    private async Task SecondsUpdatedAsync(ChangeEventArgs e)
    {
        int value = 0;
        
        if (e.Value == null || int.TryParse(e.Value.ToString(), out value) == false)
        {
            _iSeconds = null;
        }
        else
        {
            _iSeconds = value;
            
            while (_iSeconds > 59)
            {
                _iMinutes++;
                _iSeconds -= 60;

                if (_iMinutes > 59)
                {
                    _iHours++;
                    _iMinutes -= 60;
                }

                if (_iHours > 23)
                {
                    _iDays++;
                    _iHours -= 24;
                }
            }
        }

        Reload();
    }
}