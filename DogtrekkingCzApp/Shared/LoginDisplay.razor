@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Protos.UserProfiles
@using DogtrekkingCzApp.Models
@using DogtrekkingCzApp.Pages.UserProfiles
@using Grpc.Net.ClientFactory
@using System.Security.Claims
@using DogtrekkingCzApp.Services
@using DogtrekkingCzShared.Entities
@using DogtrekkingCzShared.Extensions
@using MapsterMapper

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IModalService modal
@inject IMapper mapper

@inject Protos.Authorization.Authorization.AuthorizationClient AuthorizationClient
@inject Protos.UserProfiles.UserProfiles.UserProfilesClient UserProfilesClient
@inject IUserProfileService UserProfileService

<AuthorizeView>
    <Authorized>
        Hello, <a @onclick="@(async () => await UpdateUserAsync())">@_nameOfLoggedUser</a>
        <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{
    private AuthenticationState _authState = null;
    private string _nameOfLoggedUser = "";
    private UserProfileModel Model = null;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();
    }

    private async Task UpdateUserAsync()
    {
        var parameters = new ModalParameters()
            .Add(nameof(UserProfileModal.Model), Model)
            .Add(nameof(UserProfileModal.RequiredAction), UserProfileRequiredAction.Update);

        var messageForm = modal.Show<UserProfileModal>("Registering user", parameters);
        var result = await messageForm.Result;
    }

    private void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
}