@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Protos.UserProfiles
@using DogtrekkingCzApp.Models
@using DogtrekkingCzApp.Pages.UserProfiles
@using Grpc.Net.ClientFactory
@using System.Security.Claims
@using DogtrekkingCzApp.Services
@using DogtrekkingCzShared.Entities
@using DogtrekkingCzShared.Extensions
@using MapsterMapper

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IModalService modal
@inject IMapper mapper

@inject Protos.Authorization.Authorization.AuthorizationClient AuthorizationClient
@inject Protos.UserProfiles.UserProfiles.UserProfilesClient UserProfilesClient
@inject IUserProfileService UserProfileService

<AuthorizeView>
    <Authorized>
        Hello, <a @onclick="@(async () => await UpdateUserAsync())">@_nameOfLoggedUser</a>
        <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{
    private AuthenticationState _authState = null;
    private string _nameOfLoggedUser = "";
    private UserProfileModel Model = null;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (_authState?.User?.Identity?.IsAuthenticated == true && _authState?.User?.Claims != null)
        {
            var claims = _authState.User.Claims;
            var emailClaim = claims.FirstOrDefault(claim => claim.Type == "email");
            var userId = claims.FirstOrDefault(claim => claim.Type == "oid")?.Value ?? "";
            var firstName = claims.FirstOrDefault(claim => claim.Type == "given_name")?.Value ?? "";
            var lastName = claims.FirstOrDefault(claim => claim.Type == "family_name")?.Value ?? "";

            _nameOfLoggedUser = firstName;

            var userModel = await LoadUserDataAsync();
            
            if (string.IsNullOrEmpty(userModel.Id))
            {
                await RegisterUserAsync(userId, emailClaim, firstName, lastName);
            }
            else
            {
                _nameOfLoggedUser = $"{userModel.FirstName} {userModel.LastName}";

                Model = userModel;
            }

            StateHasChanged();
        }
    }

    private async Task UpdateUserAsync()
    {
        var parameters = new ModalParameters()
            .Add(nameof(UserProfileModal.Model), Model)
            .Add(nameof(UserProfileModal.RequiredAction), UserProfileRequiredAction.Update);

        var messageForm = modal.Show<UserProfileModal>("Registering user", parameters);
        var result = await messageForm.Result;
    }

    private async Task RegisterUserAsync(string userId, Claim emailClaim, string firstName, string lastName)
    {
        var model = new UserProfileModel
        {
            UserId = userId,
            CompetitorId = Guid.Empty,
            Contact = new ContactDto
            {
                EmailAddress = emailClaim.Value
            },
            FirstName = firstName,
            LastName = lastName,
            Nickname = "",
            Birthday = DateTime.Now
        };

        var parameters = new ModalParameters()
            .Add(nameof(UserProfileModal.Model), model)
            .Add(nameof(UserProfileModal.RequiredAction), UserProfileRequiredAction.Register);

        var messageForm = modal.Show<UserProfileModal>("Registering user", parameters);
        var result = await messageForm.Result;
    }

    private void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }

    private async Task<UserProfileModel> LoadUserDataAsync()
    {
        Protos.UserProfiles.GetUserProfileResponse userProfile = await UserProfilesClient.getUserProfileAsync(new GetUserProfileRequest());

        UserProfileService.SetUserProfile(new UserProfileDto
        {
            Id = userProfile.UserProfile.Id,
            UserId = userProfile.UserProfile.UserId,
            Address = new AddressDto
            {
                City = userProfile.UserProfile.Address.City,
                Country = userProfile.UserProfile.Address.Country,
                Position = new LatLngDto
                {
                    GpsLatitude = userProfile.UserProfile.Address.Position.Latitude,
                    GpsLongitude = userProfile.UserProfile.Address.Position.Longitude
                },
                Region = userProfile.UserProfile.Address.Region,
                Street = userProfile.UserProfile.Address.Street
            },
            Birthday = userProfile.UserProfile.Birthday.ToDateTimeOffset(),
            Contact = new ContactDto
            {
                EmailAddress = userProfile.UserProfile.Contact.EmailAddress,
                PhoneNumber = userProfile.UserProfile.Contact.PhoneNumber
            }, 
            Dogs = userProfile.UserProfile.Dogs
                .Select(dog => new DogDto
                {
                    Birthday = dog.Birthday.ToDateTimeOffset(),
                    Name = dog.Name,
                    Chip = dog.Chip,
                    Decease = dog.Decease.ToDateTimeOffset(),
                    Id = dog.Id,
                    Pedigree = dog.Pedigree,
                    UriToPhoto = dog.UriToPhoto,
                    Vaccinations = dog.Vaccinations
                        .Select(vacc => new DogDto.VaccinationDto
                        {
                            UriToPhoto = vacc.UriToPhoto,
                            Date = vacc.Date.ToDateTimeOffset(),
                            Note = vacc.Note,
                            ValidUntil = vacc.ValidUntil.ToDateTimeOffset(),
                            Type = (DogDto.VaccinationType) vacc.Type
                        })
                        .ToList()
                })
                .ToList(),
            Nickname = userProfile.UserProfile.Nickname,
            CompetitorId = Guid.Parse(userProfile.UserProfile.CompetitorId),
            FirstName = userProfile.UserProfile.FirstName,
            LastName = userProfile.UserProfile.LastName
        });

        // load all rights of current user
        Protos.Authorization.GetAllRightsResponse rights = await AuthorizationClient.getAllRightsAsync(new Protos.Authorization.GetAllRightsRequest());

        var userRights = new List<ActionRightsDto>(rights.ActionRights.Count);
        foreach (var right in rights.ActionRights)
        {
            userRights.Add(new ActionRightsDto
            {
                Id = right.Id,
                ActionId = right.ActionId,
                UserId = right.UserId,
                Rights = (ActionRightsDto.RightsType) right.Rights,
                Roles = right.Roles
            });
        }
        
        UserProfileService.SetRights(userRights);

        return UserProfileService.Get();
    }
}